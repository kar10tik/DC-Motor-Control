
n20_encoder_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028b8  080028b8  000038b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028dc  080028dc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080028dc  080028dc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028dc  080028dc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028dc  080028dc  000038dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028e0  080028e0  000038e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028e4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  080028f0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080028f0  0000411c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e37  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e6  00000000  00000000  0000ce6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0000e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077d  00000000  00000000  0000f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016617  00000000  00000000  0000f895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a90d  00000000  00000000  00025eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820f8  00000000  00000000  000307b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b28b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000279c  00000000  00000000  000b28f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b5090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a0 	.word	0x080028a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028a0 	.word	0x080028a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc31 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f83d 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f975 	bl	8000448 <MX_GPIO_Init>
  MX_TIM3_Init();
 800015e:	f000 f91d 	bl	800039c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000162:	f000 f8c3 	bl	80002ec <MX_TIM2_Init>
  MX_TIM1_Init();
 8000166:	f000 f871 	bl	800024c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //1000 rpm motor can take at least 60ms to rotate
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //TIM_CHANNEL_ALL);
 800016a:	213c      	movs	r1, #60	@ 0x3c
 800016c:	4813      	ldr	r0, [pc, #76]	@ (80001bc <main+0x70>)
 800016e:	f001 fd2f 	bl	8001bd0 <HAL_TIM_Encoder_Start>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);//HAL_TIM_Base_Start_IT(&htim3);
 8000172:	4b12      	ldr	r3, [pc, #72]	@ (80001bc <main+0x70>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	68da      	ldr	r2, [r3, #12]
 8000178:	4b10      	ldr	r3, [pc, #64]	@ (80001bc <main+0x70>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	f042 0201 	orr.w	r2, r2, #1
 8000180:	60da      	str	r2, [r3, #12]
  // Start PWM Generation
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000182:	2100      	movs	r1, #0
 8000184:	480e      	ldr	r0, [pc, #56]	@ (80001c0 <main+0x74>)
 8000186:	f001 fbe5 	bl	8001954 <HAL_TIM_PWM_Start>
  // Timer for speed updates
  HAL_TIM_Base_Start_IT(&htim1);
 800018a:	480e      	ldr	r0, [pc, #56]	@ (80001c4 <main+0x78>)
 800018c:	f001 fb46 	bl	800181c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (speed_compute_flag){
 8000190:	4b0d      	ldr	r3, [pc, #52]	@ (80001c8 <main+0x7c>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d003      	beq.n	80001a2 <main+0x56>
		  update_encoder(&n20_encoder, &htim1);
 800019a:	490a      	ldr	r1, [pc, #40]	@ (80001c4 <main+0x78>)
 800019c:	480b      	ldr	r0, [pc, #44]	@ (80001cc <main+0x80>)
 800019e:	f000 f9b7 	bl	8000510 <update_encoder>
	  }
	  if (pid_compute_flag){
 80001a2:	4b0b      	ldr	r3, [pc, #44]	@ (80001d0 <main+0x84>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d0f1      	beq.n	8000190 <main+0x44>
		  pid_pwm(n20_encoder, 1, &htim2);
 80001ac:	4a07      	ldr	r2, [pc, #28]	@ (80001cc <main+0x80>)
 80001ae:	4b04      	ldr	r3, [pc, #16]	@ (80001c0 <main+0x74>)
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2301      	movs	r3, #1
 80001b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80001b6:	f000 fa13 	bl	80005e0 <pid_pwm>
	  if (speed_compute_flag){
 80001ba:	e7e9      	b.n	8000190 <main+0x44>
 80001bc:	200000c4 	.word	0x200000c4
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	20000034 	.word	0x20000034
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	20000028 	.word	0x20000028
 80001d0:	2000010d 	.word	0x2000010d

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	@ 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	@ 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fb30 	bl	8002848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fe:	2310      	movs	r3, #16
 8000200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000202:	2300      	movs	r3, #0
 8000204:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fed8 	bl	8000fc0 <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000216:	f000 f975 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800021e:	2300      	movs	r3, #0
 8000220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 f946 	bl	80014c4 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800023e:	f000 f961 	bl	8000504 <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	@ 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000268:	4b1e      	ldr	r3, [pc, #120]	@ (80002e4 <MX_TIM1_Init+0x98>)
 800026a:	4a1f      	ldr	r2, [pc, #124]	@ (80002e8 <MX_TIM1_Init+0x9c>)
 800026c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800026e:	4b1d      	ldr	r3, [pc, #116]	@ (80002e4 <MX_TIM1_Init+0x98>)
 8000270:	2200      	movs	r2, #0
 8000272:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000274:	4b1b      	ldr	r3, [pc, #108]	@ (80002e4 <MX_TIM1_Init+0x98>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800027a:	4b1a      	ldr	r3, [pc, #104]	@ (80002e4 <MX_TIM1_Init+0x98>)
 800027c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000280:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000282:	4b18      	ldr	r3, [pc, #96]	@ (80002e4 <MX_TIM1_Init+0x98>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000288:	4b16      	ldr	r3, [pc, #88]	@ (80002e4 <MX_TIM1_Init+0x98>)
 800028a:	2200      	movs	r2, #0
 800028c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028e:	4b15      	ldr	r3, [pc, #84]	@ (80002e4 <MX_TIM1_Init+0x98>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000294:	4813      	ldr	r0, [pc, #76]	@ (80002e4 <MX_TIM1_Init+0x98>)
 8000296:	f001 fa71 	bl	800177c <HAL_TIM_Base_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80002a0:	f000 f930 	bl	8000504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	4619      	mov	r1, r3
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <MX_TIM1_Init+0x98>)
 80002b2:	f001 fecd 	bl	8002050 <HAL_TIM_ConfigClockSource>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80002bc:	f000 f922 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002c0:	2300      	movs	r3, #0
 80002c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c4:	2300      	movs	r3, #0
 80002c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002c8:	463b      	mov	r3, r7
 80002ca:	4619      	mov	r1, r3
 80002cc:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <MX_TIM1_Init+0x98>)
 80002ce:	f002 fa51 	bl	8002774 <HAL_TIMEx_MasterConfigSynchronization>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80002d8:	f000 f914 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000034 	.word	0x20000034
 80002e8:	40012c00 	.word	0x40012c00

080002ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	@ 0x28
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f2:	f107 0320 	add.w	r3, r7, #32
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]
 800030a:	615a      	str	r2, [r3, #20]
 800030c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800030e:	4b22      	ldr	r3, [pc, #136]	@ (8000398 <MX_TIM2_Init+0xac>)
 8000310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000314:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8000316:	4b20      	ldr	r3, [pc, #128]	@ (8000398 <MX_TIM2_Init+0xac>)
 8000318:	2247      	movs	r2, #71	@ 0x47
 800031a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b1e      	ldr	r3, [pc, #120]	@ (8000398 <MX_TIM2_Init+0xac>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000322:	4b1d      	ldr	r3, [pc, #116]	@ (8000398 <MX_TIM2_Init+0xac>)
 8000324:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032a:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <MX_TIM2_Init+0xac>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000330:	4b19      	ldr	r3, [pc, #100]	@ (8000398 <MX_TIM2_Init+0xac>)
 8000332:	2200      	movs	r2, #0
 8000334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000336:	4818      	ldr	r0, [pc, #96]	@ (8000398 <MX_TIM2_Init+0xac>)
 8000338:	f001 fabc 	bl	80018b4 <HAL_TIM_PWM_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000342:	f000 f8df 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000346:	2300      	movs	r3, #0
 8000348:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800034e:	f107 0320 	add.w	r3, r7, #32
 8000352:	4619      	mov	r1, r3
 8000354:	4810      	ldr	r0, [pc, #64]	@ (8000398 <MX_TIM2_Init+0xac>)
 8000356:	f002 fa0d 	bl	8002774 <HAL_TIMEx_MasterConfigSynchronization>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000360:	f000 f8d0 	bl	8000504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000364:	2360      	movs	r3, #96	@ 0x60
 8000366:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	4619      	mov	r1, r3
 800037a:	4807      	ldr	r0, [pc, #28]	@ (8000398 <MX_TIM2_Init+0xac>)
 800037c:	f001 fda6 	bl	8001ecc <HAL_TIM_PWM_ConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000386:	f000 f8bd 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800038a:	4803      	ldr	r0, [pc, #12]	@ (8000398 <MX_TIM2_Init+0xac>)
 800038c:	f000 fa6e 	bl	800086c <HAL_TIM_MspPostInit>

}
 8000390:	bf00      	nop
 8000392:	3728      	adds	r7, #40	@ 0x28
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000007c 	.word	0x2000007c

0800039c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08c      	sub	sp, #48	@ 0x30
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003a2:	f107 030c 	add.w	r3, r7, #12
 80003a6:	2224      	movs	r2, #36	@ 0x24
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fa4c 	bl	8002848 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003b8:	4b21      	ldr	r3, [pc, #132]	@ (8000440 <MX_TIM3_Init+0xa4>)
 80003ba:	4a22      	ldr	r2, [pc, #136]	@ (8000444 <MX_TIM3_Init+0xa8>)
 80003bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000 - 1;
 80003be:	4b20      	ldr	r3, [pc, #128]	@ (8000440 <MX_TIM3_Init+0xa4>)
 80003c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <MX_TIM3_Init+0xa4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400 - 1;
 80003cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000440 <MX_TIM3_Init+0xa4>)
 80003ce:	f240 128f 	movw	r2, #399	@ 0x18f
 80003d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <MX_TIM3_Init+0xa4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003da:	4b19      	ldr	r3, [pc, #100]	@ (8000440 <MX_TIM3_Init+0xa4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003e0:	2303      	movs	r3, #3
 80003e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003e8:	2301      	movs	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003f4:	2300      	movs	r3, #0
 80003f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003f8:	2301      	movs	r3, #1
 80003fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	4619      	mov	r1, r3
 800040a:	480d      	ldr	r0, [pc, #52]	@ (8000440 <MX_TIM3_Init+0xa4>)
 800040c:	f001 fb3e 	bl	8001a8c <HAL_TIM_Encoder_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000416:	f000 f875 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	@ (8000440 <MX_TIM3_Init+0xa4>)
 8000428:	f002 f9a4 	bl	8002774 <HAL_TIMEx_MasterConfigSynchronization>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000432:	f000 f867 	bl	8000504 <Error_Handler>
  /* USER CODE BEGIN TIM3_Init 2 */

  //
  /* USER CODE END TIM3_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3730      	adds	r7, #48	@ 0x30
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200000c4 	.word	0x200000c4
 8000444:	40000400 	.word	0x40000400

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b17      	ldr	r3, [pc, #92]	@ (80004bc <MX_GPIO_Init+0x74>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a16      	ldr	r2, [pc, #88]	@ (80004bc <MX_GPIO_Init+0x74>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <MX_GPIO_Init+0x74>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <MX_GPIO_Init+0x74>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a10      	ldr	r2, [pc, #64]	@ (80004bc <MX_GPIO_Init+0x74>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <MX_GPIO_Init+0x74>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_1_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	21c0      	movs	r1, #192	@ 0xc0
 8000490:	480b      	ldr	r0, [pc, #44]	@ (80004c0 <MX_GPIO_Init+0x78>)
 8000492:	f000 fd7d 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_1_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_2_Pin;
 8000496:	23c0      	movs	r3, #192	@ 0xc0
 8000498:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2302      	movs	r3, #2
 80004a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4619      	mov	r1, r3
 80004ac:	4804      	ldr	r0, [pc, #16]	@ (80004c0 <MX_GPIO_Init+0x78>)
 80004ae:	f000 fbf3 	bl	8000c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b2:	bf00      	nop
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010c00 	.word	0x40010c00

080004c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	// Control Motor Speed
	if (htim->Instance == TIM1) { // Timer update interrupt
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a09      	ldr	r2, [pc, #36]	@ (80004f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d103      	bne.n	80004de <HAL_TIM_PeriodElapsedCallback+0x1a>
		speed_compute_flag = 1;
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80004d8:	2201      	movs	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
	else if (htim->Instance == TIM2) { // Timer update interrupt
		pid_compute_flag = 1;
	}
        //__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, pwm_output);

}
 80004dc:	e007      	b.n	80004ee <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if (htim->Instance == TIM2) { // Timer update interrupt
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004e6:	d102      	bne.n	80004ee <HAL_TIM_PeriodElapsedCallback+0x2a>
		pid_compute_flag = 1;
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40012c00 	.word	0x40012c00
 80004fc:	2000010c 	.word	0x2000010c
 8000500:	2000010d 	.word	0x2000010d

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <update_encoder>:
 * @brief
 *
 * @param encoder_value
 * @param htim
 */
void update_encoder(Encoder_data *encoder_value, TIM_HandleTypeDef *htim){
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
	uint16_t temp_counter = htim->Instance->CNT; //__HAL_TIM_GET_COUNTER(htim)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000520:	81bb      	strh	r3, [r7, #12]
	int16_t delta_count = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	81fb      	strh	r3, [r7, #14]
	if (temp_counter > encoder_value->count){
 8000526:	89ba      	ldrh	r2, [r7, #12]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	429a      	cmp	r2, r3
 800052e:	d91e      	bls.n	800056e <update_encoder+0x5e>
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f003 0310 	and.w	r3, r3, #16
 800053a:	2b10      	cmp	r3, #16
 800053c:	d10f      	bne.n	800055e <update_encoder+0x4e>
			//Handle counter overflow condition
			delta_count = -(encoder_value->count) - htim->Instance->ARR - temp_counter;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	b29b      	uxth	r3, r3
 8000544:	425b      	negs	r3, r3
 8000546:	b29a      	uxth	r2, r3
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800054e:	b29b      	uxth	r3, r3
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	b29a      	uxth	r2, r3
 8000554:	89bb      	ldrh	r3, [r7, #12]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	b29b      	uxth	r3, r3
 800055a:	81fb      	strh	r3, [r7, #14]
 800055c:	e028      	b.n	80005b0 <update_encoder+0xa0>
			}
		else{
			delta_count = temp_counter - encoder_value->count;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	b29b      	uxth	r3, r3
 8000564:	89ba      	ldrh	r2, [r7, #12]
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	b29b      	uxth	r3, r3
 800056a:	81fb      	strh	r3, [r7, #14]
 800056c:	e020      	b.n	80005b0 <update_encoder+0xa0>
			}
		}

	else if (temp_counter < encoder_value->count){
 800056e:	89ba      	ldrh	r2, [r7, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	429a      	cmp	r2, r3
 8000576:	d21b      	bcs.n	80005b0 <update_encoder+0xa0>
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f003 0310 	and.w	r3, r3, #16
 8000582:	2b10      	cmp	r3, #16
 8000584:	d107      	bne.n	8000596 <update_encoder+0x86>
			delta_count = temp_counter - encoder_value->count;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	b29b      	uxth	r3, r3
 800058c:	89ba      	ldrh	r2, [r7, #12]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	81fb      	strh	r3, [r7, #14]
 8000594:	e00c      	b.n	80005b0 <update_encoder+0xa0>
		}
		else{
			delta_count = temp_counter + htim->Instance->ARR - (encoder_value->count);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800059c:	b29a      	uxth	r2, r3
 800059e:	89bb      	ldrh	r3, [r7, #12]
 80005a0:	4413      	add	r3, r2
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	81fb      	strh	r3, [r7, #14]
			}
		}

		// Store calculated velocity
	encoder_value->velocity = delta_count;
 80005b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	605a      	str	r2, [r3, #4]
		// Update absolute position
	encoder_value->position += encoder_value->velocity;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	441a      	add	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
		// Store last encoder count
	encoder_value->count = temp_counter;
 80005c6:	89ba      	ldrh	r2, [r7, #12]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	609a      	str	r2, [r3, #8]
	speed_compute_flag = 0;
 80005cc:	4b03      	ldr	r3, [pc, #12]	@ (80005dc <update_encoder+0xcc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	2000010c 	.word	0x2000010c

080005e0 <pid_pwm>:
 * @brief
 *
 * @param n20_encoder
 * @return
 */
void pid_pwm(Encoder_data n20_encoder, int32_t target_speed, TIM_HandleTypeDef* htim){
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	1d3c      	adds	r4, r7, #4
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ec:	603b      	str	r3, [r7, #0]

	static int32_t last_encoder_count = 0, prev_error = 0;
	int16_t error_integral = 0; //Integral error term
 80005ee:	2300      	movs	r3, #0
 80005f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    int32_t count = n20_encoder.count;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24

    int32_t current_speed = (count - last_encoder_count)*30/PPR;
 80005f6:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <pid_pwm+0xf4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005fc:	1ad2      	subs	r2, r2, r3
 80005fe:	4613      	mov	r3, r2
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4a34      	ldr	r2, [pc, #208]	@ (80006d8 <pid_pwm+0xf8>)
 8000608:	fb82 1203 	smull	r1, r2, r2, r3
 800060c:	441a      	add	r2, r3
 800060e:	1092      	asrs	r2, r2, #2
 8000610:	17db      	asrs	r3, r3, #31
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	623b      	str	r3, [r7, #32]
    last_encoder_count = count;
 8000616:	4a2f      	ldr	r2, [pc, #188]	@ (80006d4 <pid_pwm+0xf4>)
 8000618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800061a:	6013      	str	r3, [r2, #0]

    int16_t error = target_speed - current_speed;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	b29a      	uxth	r2, r3
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	b29b      	uxth	r3, r3
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	83fb      	strh	r3, [r7, #30]
    int32_t p_term = KP * error;
 800062a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800062e:	4613      	mov	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
    error_integral += error;
 8000638:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800063a:	8bfb      	ldrh	r3, [r7, #30]
 800063c:	4413      	add	r3, r2
 800063e:	b29b      	uxth	r3, r3
 8000640:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    if (error_integral > INTEGRAL_MAX) {
 8000642:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800064a:	dd03      	ble.n	8000654 <pid_pwm+0x74>
    	error_integral = INTEGRAL_MAX;
 800064c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000650:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000652:	e007      	b.n	8000664 <pid_pwm+0x84>
    }
    else if (error_integral < -INTEGRAL_MAX) {
 8000654:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000658:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 800065c:	da02      	bge.n	8000664 <pid_pwm+0x84>
      	error_integral = -INTEGRAL_MAX;
 800065e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000662:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }
    int32_t i_term = KI * error_integral;
 8000664:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8000668:	4613      	mov	r3, r2
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	617b      	str	r3, [r7, #20]

    int32_t d_term = KD * (error - prev_error);
 8000672:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <pid_pwm+0xfc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1ad2      	subs	r2, r2, r3
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	613b      	str	r3, [r7, #16]
    prev_error = error;
 8000686:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800068a:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <pid_pwm+0xfc>)
 800068c:	6013      	str	r3, [r2, #0]

    int32_t output = (p_term + i_term + d_term) / PID_SCALE;
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	441a      	add	r2, r3
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	4413      	add	r3, r2
 8000698:	4a11      	ldr	r2, [pc, #68]	@ (80006e0 <pid_pwm+0x100>)
 800069a:	fb82 1203 	smull	r1, r2, r2, r3
 800069e:	1152      	asrs	r2, r2, #5
 80006a0:	17db      	asrs	r3, r3, #31
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (output > MAX_PWM) {
 80006a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a8:	2bff      	cmp	r3, #255	@ 0xff
 80006aa:	dd02      	ble.n	80006b2 <pid_pwm+0xd2>
    	output = MAX_PWM;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006b0:	e004      	b.n	80006bc <pid_pwm+0xdc>
    }
    else if (output < MIN_PWM) {
 80006b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	da01      	bge.n	80006bc <pid_pwm+0xdc>
    	output = MIN_PWM;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    htim->Instance->CCR1 = output;
 80006bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006c2:	635a      	str	r2, [r3, #52]	@ 0x34
    pid_compute_flag = 0;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <pid_pwm+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	@ 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc90      	pop	{r4, r7}
 80006d2:	4770      	bx	lr
 80006d4:	20000110 	.word	0x20000110
 80006d8:	92492493 	.word	0x92492493
 80006dc:	20000114 	.word	0x20000114
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	2000010d 	.word	0x2000010d

080006e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <HAL_MspInit+0x5c>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <HAL_MspInit+0x5c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <HAL_MspInit+0x5c>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <HAL_MspInit+0x5c>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000710:	61d3      	str	r3, [r2, #28]
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800071e:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <HAL_MspInit+0x60>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <HAL_MspInit+0x60>)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	40021000 	.word	0x40021000
 8000748:	40010000 	.word	0x40010000

0800074c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <HAL_TIM_Base_MspInit+0x44>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d113      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <HAL_TIM_Base_MspInit+0x48>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <HAL_TIM_Base_MspInit+0x48>)
 8000764:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_TIM_Base_MspInit+0x48>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2019      	movs	r0, #25
 800077c:	f000 fa55 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000780:	2019      	movs	r0, #25
 8000782:	f000 fa6e 	bl	8000c62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012c00 	.word	0x40012c00
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a8:	d113      	bne.n	80007d2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_TIM_PWM_MspInit+0x44>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <HAL_TIM_PWM_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <HAL_TIM_PWM_MspInit+0x44>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	201c      	movs	r0, #28
 80007c8:	f000 fa2f 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007cc:	201c      	movs	r0, #28
 80007ce:	f000 fa48 	bl	8000c62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a19      	ldr	r2, [pc, #100]	@ (8000860 <HAL_TIM_Encoder_MspInit+0x80>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d12b      	bne.n	8000858 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000800:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x84>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x84>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	61d3      	str	r3, [r2, #28]
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x84>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x84>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a11      	ldr	r2, [pc, #68]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x84>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x84>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000830:	23c0      	movs	r3, #192	@ 0xc0
 8000832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	4809      	ldr	r0, [pc, #36]	@ (8000868 <HAL_TIM_Encoder_MspInit+0x88>)
 8000844:	f000 fa28 	bl	8000c98 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	201d      	movs	r0, #29
 800084e:	f000 f9ec 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000852:	201d      	movs	r0, #29
 8000854:	f000 fa05 	bl	8000c62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40000400 	.word	0x40000400
 8000864:	40021000 	.word	0x40021000
 8000868:	40010800 	.word	0x40010800

0800086c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800088a:	d117      	bne.n	80008bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <HAL_TIM_MspPostInit+0x58>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <HAL_TIM_MspPostInit+0x58>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <HAL_TIM_MspPostInit+0x58>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_PID_Pin;
 80008a4:	2301      	movs	r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PID_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <HAL_TIM_MspPostInit+0x5c>)
 80008b8:	f000 f9ee 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010800 	.word	0x40010800

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <NMI_Handler+0x4>

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <MemManage_Handler+0x4>

080008e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f892 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <TIM1_UP_IRQHandler+0x10>)
 800092a:	f001 f9df 	bl	8001cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000034 	.word	0x20000034

08000938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800093c:	4802      	ldr	r0, [pc, #8]	@ (8000948 <TIM2_IRQHandler+0x10>)
 800093e:	f001 f9d5 	bl	8001cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000007c 	.word	0x2000007c

0800094c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <TIM3_IRQHandler+0x10>)
 8000952:	f001 f9cb 	bl	8001cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000c4 	.word	0x200000c4

08000960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800096c:	f7ff fff8 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000972:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000974:	4a0c      	ldr	r2, [pc, #48]	@ (80009a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a09      	ldr	r2, [pc, #36]	@ (80009ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000988:	4c09      	ldr	r4, [pc, #36]	@ (80009b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f001 ff5f 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099a:	f7ff fbd7 	bl	800014c <main>
  bx lr
 800099e:	4770      	bx	lr
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a8:	080028e4 	.word	0x080028e4
  ldr r2, =_sbss
 80009ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b0:	2000011c 	.word	0x2000011c

080009b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_2_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_Init+0x28>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_Init+0x28>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f923 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	200f      	movs	r0, #15
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fe88 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40022000 	.word	0x40022000

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f93b 	bl	8000c7e <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 f903 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <HAL_IncTick+0x1c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a03      	ldr	r2, [pc, #12]	@ (8000a64 <HAL_IncTick+0x20>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000118 	.word	0x20000118

08000a68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b02      	ldr	r3, [pc, #8]	@ (8000a78 <HAL_GetTick+0x10>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000118 	.word	0x20000118

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4906      	ldr	r1, [pc, #24]	@ (8000b14 <__NVIC_EnableIRQ+0x34>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	@ (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	@ (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	@ 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	@ 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff90 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff2d 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff42 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff90 	bl	8000b6c <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5f 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff35 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa2 	bl	8000bd0 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b08b      	sub	sp, #44	@ 0x2c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000caa:	e161      	b.n	8000f70 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cac:	2201      	movs	r2, #1
 8000cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	f040 8150 	bne.w	8000f6a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4a97      	ldr	r2, [pc, #604]	@ (8000f2c <HAL_GPIO_Init+0x294>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d05e      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a95      	ldr	r2, [pc, #596]	@ (8000f2c <HAL_GPIO_Init+0x294>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d875      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000cda:	4a95      	ldr	r2, [pc, #596]	@ (8000f30 <HAL_GPIO_Init+0x298>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d058      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000ce0:	4a93      	ldr	r2, [pc, #588]	@ (8000f30 <HAL_GPIO_Init+0x298>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d86f      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000ce6:	4a93      	ldr	r2, [pc, #588]	@ (8000f34 <HAL_GPIO_Init+0x29c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d052      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000cec:	4a91      	ldr	r2, [pc, #580]	@ (8000f34 <HAL_GPIO_Init+0x29c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d869      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000cf2:	4a91      	ldr	r2, [pc, #580]	@ (8000f38 <HAL_GPIO_Init+0x2a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d04c      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a8f      	ldr	r2, [pc, #572]	@ (8000f38 <HAL_GPIO_Init+0x2a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d863      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000cfe:	4a8f      	ldr	r2, [pc, #572]	@ (8000f3c <HAL_GPIO_Init+0x2a4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d046      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
 8000d04:	4a8d      	ldr	r2, [pc, #564]	@ (8000f3c <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d85d      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000d0a:	2b12      	cmp	r3, #18
 8000d0c:	d82a      	bhi.n	8000d64 <HAL_GPIO_Init+0xcc>
 8000d0e:	2b12      	cmp	r3, #18
 8000d10:	d859      	bhi.n	8000dc6 <HAL_GPIO_Init+0x12e>
 8000d12:	a201      	add	r2, pc, #4	@ (adr r2, 8000d18 <HAL_GPIO_Init+0x80>)
 8000d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d18:	08000d93 	.word	0x08000d93
 8000d1c:	08000d6d 	.word	0x08000d6d
 8000d20:	08000d7f 	.word	0x08000d7f
 8000d24:	08000dc1 	.word	0x08000dc1
 8000d28:	08000dc7 	.word	0x08000dc7
 8000d2c:	08000dc7 	.word	0x08000dc7
 8000d30:	08000dc7 	.word	0x08000dc7
 8000d34:	08000dc7 	.word	0x08000dc7
 8000d38:	08000dc7 	.word	0x08000dc7
 8000d3c:	08000dc7 	.word	0x08000dc7
 8000d40:	08000dc7 	.word	0x08000dc7
 8000d44:	08000dc7 	.word	0x08000dc7
 8000d48:	08000dc7 	.word	0x08000dc7
 8000d4c:	08000dc7 	.word	0x08000dc7
 8000d50:	08000dc7 	.word	0x08000dc7
 8000d54:	08000dc7 	.word	0x08000dc7
 8000d58:	08000dc7 	.word	0x08000dc7
 8000d5c:	08000d75 	.word	0x08000d75
 8000d60:	08000d89 	.word	0x08000d89
 8000d64:	4a76      	ldr	r2, [pc, #472]	@ (8000f40 <HAL_GPIO_Init+0x2a8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d013      	beq.n	8000d92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d6a:	e02c      	b.n	8000dc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	623b      	str	r3, [r7, #32]
          break;
 8000d72:	e029      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	e024      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	3308      	adds	r3, #8
 8000d84:	623b      	str	r3, [r7, #32]
          break;
 8000d86:	e01f      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	330c      	adds	r3, #12
 8000d8e:	623b      	str	r3, [r7, #32]
          break;
 8000d90:	e01a      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	623b      	str	r3, [r7, #32]
          break;
 8000d9e:	e013      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d105      	bne.n	8000db4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da8:	2308      	movs	r3, #8
 8000daa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	611a      	str	r2, [r3, #16]
          break;
 8000db2:	e009      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db4:	2308      	movs	r3, #8
 8000db6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	615a      	str	r2, [r3, #20]
          break;
 8000dbe:	e003      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x130>
          break;
 8000dc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2bff      	cmp	r3, #255	@ 0xff
 8000dcc:	d801      	bhi.n	8000dd2 <HAL_GPIO_Init+0x13a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	e001      	b.n	8000dd6 <HAL_GPIO_Init+0x13e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2bff      	cmp	r3, #255	@ 0xff
 8000ddc:	d802      	bhi.n	8000de4 <HAL_GPIO_Init+0x14c>
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	e002      	b.n	8000dea <HAL_GPIO_Init+0x152>
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	3b08      	subs	r3, #8
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	210f      	movs	r1, #15
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	6a39      	ldr	r1, [r7, #32]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 80a9 	beq.w	8000f6a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e18:	4b4a      	ldr	r3, [pc, #296]	@ (8000f44 <HAL_GPIO_Init+0x2ac>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a49      	ldr	r2, [pc, #292]	@ (8000f44 <HAL_GPIO_Init+0x2ac>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b47      	ldr	r3, [pc, #284]	@ (8000f44 <HAL_GPIO_Init+0x2ac>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e30:	4a45      	ldr	r2, [pc, #276]	@ (8000f48 <HAL_GPIO_Init+0x2b0>)
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3d      	ldr	r2, [pc, #244]	@ (8000f4c <HAL_GPIO_Init+0x2b4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_Init+0x1e0>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f50 <HAL_GPIO_Init+0x2b8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x1dc>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a3b      	ldr	r2, [pc, #236]	@ (8000f54 <HAL_GPIO_Init+0x2bc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_Init+0x1d8>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e004      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e70:	2303      	movs	r3, #3
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e7c:	f002 0203 	and.w	r2, r2, #3
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	4093      	lsls	r3, r2
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e8a:	492f      	ldr	r1, [pc, #188]	@ (8000f48 <HAL_GPIO_Init+0x2b0>)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	492b      	ldr	r1, [pc, #172]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eb2:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4927      	ldr	r1, [pc, #156]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	4921      	ldr	r1, [pc, #132]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	60cb      	str	r3, [r1, #12]
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eda:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	491d      	ldr	r1, [pc, #116]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	4917      	ldr	r1, [pc, #92]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4913      	ldr	r1, [pc, #76]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d01f      	beq.n	8000f5c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	490d      	ldr	r1, [pc, #52]	@ (8000f58 <HAL_GPIO_Init+0x2c0>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
 8000f28:	e01f      	b.n	8000f6a <HAL_GPIO_Init+0x2d2>
 8000f2a:	bf00      	nop
 8000f2c:	10320000 	.word	0x10320000
 8000f30:	10310000 	.word	0x10310000
 8000f34:	10220000 	.word	0x10220000
 8000f38:	10210000 	.word	0x10210000
 8000f3c:	10120000 	.word	0x10120000
 8000f40:	10110000 	.word	0x10110000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <HAL_GPIO_Init+0x2f4>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4909      	ldr	r1, [pc, #36]	@ (8000f8c <HAL_GPIO_Init+0x2f4>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f ae96 	bne.w	8000cac <HAL_GPIO_Init+0x14>
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	372c      	adds	r7, #44	@ 0x2c
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e272      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8087 	beq.w	80010ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe0:	4b92      	ldr	r3, [pc, #584]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d00c      	beq.n	8001006 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fec:	4b8f      	ldr	r3, [pc, #572]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d112      	bne.n	800101e <HAL_RCC_OscConfig+0x5e>
 8000ff8:	4b8c      	ldr	r3, [pc, #560]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001004:	d10b      	bne.n	800101e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001006:	4b89      	ldr	r3, [pc, #548]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d06c      	beq.n	80010ec <HAL_RCC_OscConfig+0x12c>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d168      	bne.n	80010ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e24c      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001026:	d106      	bne.n	8001036 <HAL_RCC_OscConfig+0x76>
 8001028:	4b80      	ldr	r3, [pc, #512]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a7f      	ldr	r2, [pc, #508]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 800102e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	e02e      	b.n	8001094 <HAL_RCC_OscConfig+0xd4>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x98>
 800103e:	4b7b      	ldr	r3, [pc, #492]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a7a      	ldr	r2, [pc, #488]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b78      	ldr	r3, [pc, #480]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a77      	ldr	r2, [pc, #476]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e01d      	b.n	8001094 <HAL_RCC_OscConfig+0xd4>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0xbc>
 8001062:	4b72      	ldr	r3, [pc, #456]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a71      	ldr	r2, [pc, #452]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b6f      	ldr	r3, [pc, #444]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a6e      	ldr	r2, [pc, #440]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0xd4>
 800107c:	4b6b      	ldr	r3, [pc, #428]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a6a      	ldr	r2, [pc, #424]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b68      	ldr	r3, [pc, #416]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a67      	ldr	r2, [pc, #412]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 800108e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001092:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fce4 	bl	8000a68 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fce0 	bl	8000a68 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	@ 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e200      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4b5d      	ldr	r3, [pc, #372]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0xe4>
 80010c2:	e014      	b.n	80010ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fcd0 	bl	8000a68 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fccc 	bl	8000a68 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	@ 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e1ec      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	4b53      	ldr	r3, [pc, #332]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x10c>
 80010ea:	e000      	b.n	80010ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d063      	beq.n	80011c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010fa:	4b4c      	ldr	r3, [pc, #304]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001106:	4b49      	ldr	r3, [pc, #292]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b08      	cmp	r3, #8
 8001110:	d11c      	bne.n	800114c <HAL_RCC_OscConfig+0x18c>
 8001112:	4b46      	ldr	r3, [pc, #280]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d116      	bne.n	800114c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	4b43      	ldr	r3, [pc, #268]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <HAL_RCC_OscConfig+0x176>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e1c0      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b3d      	ldr	r3, [pc, #244]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4939      	ldr	r1, [pc, #228]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	e03a      	b.n	80011c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d020      	beq.n	8001196 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001154:	4b36      	ldr	r3, [pc, #216]	@ (8001230 <HAL_RCC_OscConfig+0x270>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fc85 	bl	8000a68 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001162:	f7ff fc81 	bl	8000a68 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e1a1      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4927      	ldr	r1, [pc, #156]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001196:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <HAL_RCC_OscConfig+0x270>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fc64 	bl	8000a68 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc60 	bl	8000a68 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e180      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d03a      	beq.n	8001244 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d019      	beq.n	800120a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_RCC_OscConfig+0x274>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fc44 	bl	8000a68 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc40 	bl	8000a68 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e160      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001202:	2001      	movs	r0, #1
 8001204:	f000 fa9c 	bl	8001740 <RCC_Delay>
 8001208:	e01c      	b.n	8001244 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_RCC_OscConfig+0x274>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff fc2a 	bl	8000a68 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001216:	e00f      	b.n	8001238 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff fc26 	bl	8000a68 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d908      	bls.n	8001238 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e146      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	42420000 	.word	0x42420000
 8001234:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4b92      	ldr	r3, [pc, #584]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e9      	bne.n	8001218 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a6 	beq.w	800139e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b8b      	ldr	r3, [pc, #556]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10d      	bne.n	800127e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b88      	ldr	r3, [pc, #544]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a87      	ldr	r2, [pc, #540]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b85      	ldr	r3, [pc, #532]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127e:	4b82      	ldr	r3, [pc, #520]	@ (8001488 <HAL_RCC_OscConfig+0x4c8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001286:	2b00      	cmp	r3, #0
 8001288:	d118      	bne.n	80012bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128a:	4b7f      	ldr	r3, [pc, #508]	@ (8001488 <HAL_RCC_OscConfig+0x4c8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a7e      	ldr	r2, [pc, #504]	@ (8001488 <HAL_RCC_OscConfig+0x4c8>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001296:	f7ff fbe7 	bl	8000a68 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129e:	f7ff fbe3 	bl	8000a68 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b64      	cmp	r3, #100	@ 0x64
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e103      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b0:	4b75      	ldr	r3, [pc, #468]	@ (8001488 <HAL_RCC_OscConfig+0x4c8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_OscConfig+0x312>
 80012c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6213      	str	r3, [r2, #32]
 80012d0:	e02d      	b.n	800132e <HAL_RCC_OscConfig+0x36e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x334>
 80012da:	4b6a      	ldr	r3, [pc, #424]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a69      	ldr	r2, [pc, #420]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6213      	str	r3, [r2, #32]
 80012e6:	4b67      	ldr	r3, [pc, #412]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a66      	ldr	r2, [pc, #408]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	6213      	str	r3, [r2, #32]
 80012f2:	e01c      	b.n	800132e <HAL_RCC_OscConfig+0x36e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	d10c      	bne.n	8001316 <HAL_RCC_OscConfig+0x356>
 80012fc:	4b61      	ldr	r3, [pc, #388]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4a60      	ldr	r2, [pc, #384]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6213      	str	r3, [r2, #32]
 8001308:	4b5e      	ldr	r3, [pc, #376]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4a5d      	ldr	r2, [pc, #372]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6213      	str	r3, [r2, #32]
 8001314:	e00b      	b.n	800132e <HAL_RCC_OscConfig+0x36e>
 8001316:	4b5b      	ldr	r3, [pc, #364]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a5a      	ldr	r2, [pc, #360]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	4b58      	ldr	r3, [pc, #352]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4a57      	ldr	r2, [pc, #348]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	f023 0304 	bic.w	r3, r3, #4
 800132c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d015      	beq.n	8001362 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb97 	bl	8000a68 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff fb93 	bl	8000a68 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800134c:	4293      	cmp	r3, r2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0b1      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001354:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0ee      	beq.n	800133e <HAL_RCC_OscConfig+0x37e>
 8001360:	e014      	b.n	800138c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001362:	f7ff fb81 	bl	8000a68 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001368:	e00a      	b.n	8001380 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fb7d 	bl	8000a68 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e09b      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001380:	4b40      	ldr	r3, [pc, #256]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1ee      	bne.n	800136a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d105      	bne.n	800139e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001392:	4b3c      	ldr	r3, [pc, #240]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a3b      	ldr	r2, [pc, #236]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800139c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8087 	beq.w	80014b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a8:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d061      	beq.n	8001478 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d146      	bne.n	800144a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013bc:	4b33      	ldr	r3, [pc, #204]	@ (800148c <HAL_RCC_OscConfig+0x4cc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fb51 	bl	8000a68 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff fb4d 	bl	8000a68 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e06d      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013dc:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f0:	d108      	bne.n	8001404 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4921      	ldr	r1, [pc, #132]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a19      	ldr	r1, [r3, #32]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	430b      	orrs	r3, r1
 8001416:	491b      	ldr	r1, [pc, #108]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_RCC_OscConfig+0x4cc>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fb21 	bl	8000a68 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fb1d 	bl	8000a68 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e03d      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x46a>
 8001448:	e035      	b.n	80014b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_RCC_OscConfig+0x4cc>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb0a 	bl	8000a68 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fb06 	bl	8000a68 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e026      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x498>
 8001476:	e01e      	b.n	80014b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d107      	bne.n	8001490 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e019      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
 8001484:	40021000 	.word	0x40021000
 8001488:	40007000 	.word	0x40007000
 800148c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_RCC_OscConfig+0x500>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000

080014c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0d0      	b.n	800167a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d910      	bls.n	8001508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b67      	ldr	r3, [pc, #412]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 0207 	bic.w	r2, r3, #7
 80014ee:	4965      	ldr	r1, [pc, #404]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b63      	ldr	r3, [pc, #396]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0b8      	b.n	800167a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001520:	4b59      	ldr	r3, [pc, #356]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a58      	ldr	r2, [pc, #352]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800152a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001538:	4b53      	ldr	r3, [pc, #332]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a52      	ldr	r2, [pc, #328]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001544:	4b50      	ldr	r3, [pc, #320]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	494d      	ldr	r1, [pc, #308]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d040      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b47      	ldr	r3, [pc, #284]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d115      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e07f      	b.n	800167a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d107      	bne.n	8001592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	4b41      	ldr	r3, [pc, #260]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e073      	b.n	800167a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001592:	4b3d      	ldr	r3, [pc, #244]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e06b      	b.n	800167a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a2:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f023 0203 	bic.w	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4936      	ldr	r1, [pc, #216]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b4:	f7ff fa58 	bl	8000a68 <HAL_GetTick>
 80015b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015bc:	f7ff fa54 	bl	8000a68 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e053      	b.n	800167a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 020c 	and.w	r2, r3, #12
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d1eb      	bne.n	80015bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015e4:	4b27      	ldr	r3, [pc, #156]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d210      	bcs.n	8001614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 0207 	bic.w	r2, r3, #7
 80015fa:	4922      	ldr	r1, [pc, #136]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e032      	b.n	800167a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4916      	ldr	r1, [pc, #88]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	490e      	ldr	r1, [pc, #56]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001652:	f000 f821 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 8001656:	4602      	mov	r2, r0
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	490a      	ldr	r1, [pc, #40]	@ (800168c <HAL_RCC_ClockConfig+0x1c8>)
 8001664:	5ccb      	ldrb	r3, [r1, r3]
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	4a09      	ldr	r2, [pc, #36]	@ (8001690 <HAL_RCC_ClockConfig+0x1cc>)
 800166c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_RCC_ClockConfig+0x1d0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f9b6 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000
 8001688:	40021000 	.word	0x40021000
 800168c:	080028b8 	.word	0x080028b8
 8001690:	20000000 	.word	0x20000000
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016b2:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <HAL_RCC_GetSysClockFreq+0x94>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d002      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x30>
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0x36>
 80016c6:	e027      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ca:	613b      	str	r3, [r7, #16]
      break;
 80016cc:	e027      	b.n	800171e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	0c9b      	lsrs	r3, r3, #18
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	4a17      	ldr	r2, [pc, #92]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
 80016da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d010      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_RCC_GetSysClockFreq+0x94>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	0c5b      	lsrs	r3, r3, #17
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	4a11      	ldr	r2, [pc, #68]	@ (8001738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x98>)
 80016fa:	fb03 f202 	mul.w	r2, r3, r2
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e004      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <HAL_RCC_GetSysClockFreq+0xa4>)
 800170c:	fb02 f303 	mul.w	r3, r2, r3
 8001710:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	613b      	str	r3, [r7, #16]
      break;
 8001716:	e002      	b.n	800171e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x98>)
 800171a:	613b      	str	r3, [r7, #16]
      break;
 800171c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800171e:	693b      	ldr	r3, [r7, #16]
}
 8001720:	4618      	mov	r0, r3
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	007a1200 	.word	0x007a1200
 8001734:	080028c8 	.word	0x080028c8
 8001738:	080028d8 	.word	0x080028d8
 800173c:	003d0900 	.word	0x003d0900

08001740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <RCC_Delay+0x34>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <RCC_Delay+0x38>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0a5b      	lsrs	r3, r3, #9
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800175c:	bf00      	nop
  }
  while (Delay --);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	60fa      	str	r2, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f9      	bne.n	800175c <RCC_Delay+0x1c>
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000000 	.word	0x20000000
 8001778:	10624dd3 	.word	0x10624dd3

0800177c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e041      	b.n	8001812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe ffd2 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3304      	adds	r3, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4610      	mov	r0, r2
 80017bc:	f000 fd34 	bl	8002228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d001      	beq.n	8001834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e035      	b.n	80018a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <HAL_TIM_Base_Start_IT+0x90>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d009      	beq.n	800186a <HAL_TIM_Base_Start_IT+0x4e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800185e:	d004      	beq.n	800186a <HAL_TIM_Base_Start_IT+0x4e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <HAL_TIM_Base_Start_IT+0x94>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d111      	bne.n	800188e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b06      	cmp	r3, #6
 800187a:	d010      	beq.n	800189e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188c:	e007      	b.n	800189e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40000400 	.word	0x40000400

080018b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e041      	b.n	800194a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe ff5c 	bl	8000798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 fc98 	bl	8002228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_TIM_PWM_Start+0x24>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	e022      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d109      	bne.n	8001992 <HAL_TIM_PWM_Start+0x3e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	e015      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d109      	bne.n	80019ac <HAL_TIM_PWM_Start+0x58>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e008      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e059      	b.n	8001a7a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <HAL_TIM_PWM_Start+0x82>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019d4:	e013      	b.n	80019fe <HAL_TIM_PWM_Start+0xaa>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d104      	bne.n	80019e6 <HAL_TIM_PWM_Start+0x92>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019e4:	e00b      	b.n	80019fe <HAL_TIM_PWM_Start+0xaa>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d104      	bne.n	80019f6 <HAL_TIM_PWM_Start+0xa2>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019f4:	e003      	b.n	80019fe <HAL_TIM_PWM_Start+0xaa>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fe90 	bl	800272c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_TIM_PWM_Start+0x130>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <HAL_TIM_PWM_Start+0x130>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d009      	beq.n	8001a44 <HAL_TIM_PWM_Start+0xf0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a38:	d004      	beq.n	8001a44 <HAL_TIM_PWM_Start+0xf0>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <HAL_TIM_PWM_Start+0x134>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d111      	bne.n	8001a68 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d010      	beq.n	8001a78 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a66:	e007      	b.n	8001a78 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40012c00 	.word	0x40012c00
 8001a88:	40000400 	.word	0x40000400

08001a8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e093      	b.n	8001bc8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d106      	bne.n	8001aba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7fe fe93 	bl	80007e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ad0:	f023 0307 	bic.w	r3, r3, #7
 8001ad4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3304      	adds	r3, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f000 fba1 	bl	8002228 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001b2c:	f023 030c 	bic.w	r3, r3, #12
 8001b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001b38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	011a      	lsls	r2, r3, #4
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	031b      	lsls	r3, r3, #12
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001b6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4313      	orrs	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001be0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001be8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001bf0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001bf8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d110      	bne.n	8001c22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c06:	7b7b      	ldrb	r3, [r7, #13]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d001      	beq.n	8001c10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e069      	b.n	8001ce4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c20:	e031      	b.n	8001c86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d110      	bne.n	8001c4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c28:	7bbb      	ldrb	r3, [r7, #14]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c2e:	7b3b      	ldrb	r3, [r7, #12]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d001      	beq.n	8001c38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e055      	b.n	8001ce4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c48:	e01d      	b.n	8001c86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d108      	bne.n	8001c62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c50:	7bbb      	ldrb	r3, [r7, #14]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c56:	7b7b      	ldrb	r3, [r7, #13]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c5c:	7b3b      	ldrb	r3, [r7, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d001      	beq.n	8001c66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e03e      	b.n	8001ce4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_TIM_Encoder_Start+0xc4>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d008      	beq.n	8001ca4 <HAL_TIM_Encoder_Start+0xd4>
 8001c92:	e00f      	b.n	8001cb4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fd45 	bl	800272c <TIM_CCxChannelCmd>
      break;
 8001ca2:	e016      	b.n	8001cd2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2104      	movs	r1, #4
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 fd3d 	bl	800272c <TIM_CCxChannelCmd>
      break;
 8001cb2:	e00e      	b.n	8001cd2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fd35 	bl	800272c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2104      	movs	r1, #4
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fd2e 	bl	800272c <TIM_CCxChannelCmd>
      break;
 8001cd0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0201 	orr.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d020      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0202 	mvn.w	r2, #2
 8001d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fa5a 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fa4d 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa5c 	bl	8002202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d020      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0204 	mvn.w	r2, #4
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fa34 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa27 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fa36 	bl	8002202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d020      	beq.n	8001de8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01b      	beq.n	8001de8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0208 	mvn.w	r2, #8
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fa0e 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa01 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fa10 	bl	8002202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0210 	mvn.w	r2, #16
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f9e8 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f9db 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f9ea 	bl	8002202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0201 	mvn.w	r2, #1
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fb36 	bl	80004c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fcdd 	bl	8002836 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f9ba 	bl	8002214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0220 	mvn.w	r2, #32
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fcb0 	bl	8002824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e0ae      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	f200 809f 	bhi.w	8002038 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001efa:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f35 	.word	0x08001f35
 8001f04:	08002039 	.word	0x08002039
 8001f08:	08002039 	.word	0x08002039
 8001f0c:	08002039 	.word	0x08002039
 8001f10:	08001f75 	.word	0x08001f75
 8001f14:	08002039 	.word	0x08002039
 8001f18:	08002039 	.word	0x08002039
 8001f1c:	08002039 	.word	0x08002039
 8001f20:	08001fb7 	.word	0x08001fb7
 8001f24:	08002039 	.word	0x08002039
 8001f28:	08002039 	.word	0x08002039
 8001f2c:	08002039 	.word	0x08002039
 8001f30:	08001ff7 	.word	0x08001ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f9d8 	bl	80022f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0204 	bic.w	r2, r2, #4
 8001f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6999      	ldr	r1, [r3, #24]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	619a      	str	r2, [r3, #24]
      break;
 8001f72:	e064      	b.n	800203e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fa1e 	bl	80023bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6999      	ldr	r1, [r3, #24]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	021a      	lsls	r2, r3, #8
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	619a      	str	r2, [r3, #24]
      break;
 8001fb4:	e043      	b.n	800203e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fa67 	bl	8002490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0208 	orr.w	r2, r2, #8
 8001fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0204 	bic.w	r2, r2, #4
 8001fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69d9      	ldr	r1, [r3, #28]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	61da      	str	r2, [r3, #28]
      break;
 8001ff4:	e023      	b.n	800203e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fab1 	bl	8002564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69d9      	ldr	r1, [r3, #28]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	021a      	lsls	r2, r3, #8
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	61da      	str	r2, [r3, #28]
      break;
 8002036:	e002      	b.n	800203e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	75fb      	strb	r3, [r7, #23]
      break;
 800203c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002046:	7dfb      	ldrb	r3, [r7, #23]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_TIM_ConfigClockSource+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e0b4      	b.n	80021d6 <HAL_TIM_ConfigClockSource+0x186>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800208a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020a4:	d03e      	beq.n	8002124 <HAL_TIM_ConfigClockSource+0xd4>
 80020a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020aa:	f200 8087 	bhi.w	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020b2:	f000 8086 	beq.w	80021c2 <HAL_TIM_ConfigClockSource+0x172>
 80020b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ba:	d87f      	bhi.n	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020bc:	2b70      	cmp	r3, #112	@ 0x70
 80020be:	d01a      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0xa6>
 80020c0:	2b70      	cmp	r3, #112	@ 0x70
 80020c2:	d87b      	bhi.n	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020c4:	2b60      	cmp	r3, #96	@ 0x60
 80020c6:	d050      	beq.n	800216a <HAL_TIM_ConfigClockSource+0x11a>
 80020c8:	2b60      	cmp	r3, #96	@ 0x60
 80020ca:	d877      	bhi.n	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020cc:	2b50      	cmp	r3, #80	@ 0x50
 80020ce:	d03c      	beq.n	800214a <HAL_TIM_ConfigClockSource+0xfa>
 80020d0:	2b50      	cmp	r3, #80	@ 0x50
 80020d2:	d873      	bhi.n	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	2b40      	cmp	r3, #64	@ 0x40
 80020d6:	d058      	beq.n	800218a <HAL_TIM_ConfigClockSource+0x13a>
 80020d8:	2b40      	cmp	r3, #64	@ 0x40
 80020da:	d86f      	bhi.n	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020dc:	2b30      	cmp	r3, #48	@ 0x30
 80020de:	d064      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x15a>
 80020e0:	2b30      	cmp	r3, #48	@ 0x30
 80020e2:	d86b      	bhi.n	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d060      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x15a>
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d867      	bhi.n	80021bc <HAL_TIM_ConfigClockSource+0x16c>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d05c      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x15a>
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d05a      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x15a>
 80020f4:	e062      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002106:	f000 faf2 	bl	80026ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	609a      	str	r2, [r3, #8]
      break;
 8002122:	e04f      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002134:	f000 fadb 	bl	80026ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002146:	609a      	str	r2, [r3, #8]
      break;
 8002148:	e03c      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002156:	461a      	mov	r2, r3
 8002158:	f000 fa52 	bl	8002600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2150      	movs	r1, #80	@ 0x50
 8002162:	4618      	mov	r0, r3
 8002164:	f000 faa9 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 8002168:	e02c      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002176:	461a      	mov	r2, r3
 8002178:	f000 fa70 	bl	800265c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2160      	movs	r1, #96	@ 0x60
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fa99 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 8002188:	e01c      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002196:	461a      	mov	r2, r3
 8002198:	f000 fa32 	bl	8002600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2140      	movs	r1, #64	@ 0x40
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fa89 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 80021a8:	e00c      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	4610      	mov	r0, r2
 80021b6:	f000 fa80 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 80021ba:	e003      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      break;
 80021c0:	e000      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
	...

08002228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a2b      	ldr	r2, [pc, #172]	@ (80022e8 <TIM_Base_SetConfig+0xc0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d007      	beq.n	8002250 <TIM_Base_SetConfig+0x28>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002246:	d003      	beq.n	8002250 <TIM_Base_SetConfig+0x28>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a28      	ldr	r2, [pc, #160]	@ (80022ec <TIM_Base_SetConfig+0xc4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d108      	bne.n	8002262 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a20      	ldr	r2, [pc, #128]	@ (80022e8 <TIM_Base_SetConfig+0xc0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <TIM_Base_SetConfig+0x52>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002270:	d003      	beq.n	800227a <TIM_Base_SetConfig+0x52>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <TIM_Base_SetConfig+0xc4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <TIM_Base_SetConfig+0xc0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d103      	bne.n	80022c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f023 0201 	bic.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]
  }
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400

080022f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f023 0201 	bic.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800231e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0303 	bic.w	r3, r3, #3
 8002326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f023 0302 	bic.w	r3, r3, #2
 8002338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a1c      	ldr	r2, [pc, #112]	@ (80023b8 <TIM_OC1_SetConfig+0xc8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d10c      	bne.n	8002366 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f023 0308 	bic.w	r3, r3, #8
 8002352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <TIM_OC1_SetConfig+0xc8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d111      	bne.n	8002392 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800237c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	621a      	str	r2, [r3, #32]
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40012c00 	.word	0x40012c00

080023bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f023 0210 	bic.w	r2, r3, #16
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f023 0320 	bic.w	r3, r3, #32
 8002406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a1d      	ldr	r2, [pc, #116]	@ (800248c <TIM_OC2_SetConfig+0xd0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d10d      	bne.n	8002438 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002436:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a14      	ldr	r2, [pc, #80]	@ (800248c <TIM_OC2_SetConfig+0xd0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d113      	bne.n	8002468 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800244e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40012c00 	.word	0x40012c00

08002490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002560 <TIM_OC3_SetConfig+0xd0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10d      	bne.n	800250a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <TIM_OC3_SetConfig+0xd0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d113      	bne.n	800253a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	621a      	str	r2, [r3, #32]
}
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40012c00 	.word	0x40012c00

08002564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800259a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	031b      	lsls	r3, r3, #12
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0f      	ldr	r2, [pc, #60]	@ (80025fc <TIM_OC4_SetConfig+0x98>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d109      	bne.n	80025d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	019b      	lsls	r3, r3, #6
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	621a      	str	r2, [r3, #32]
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40012c00 	.word	0x40012c00

08002600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f023 0201 	bic.w	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800262a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f023 030a 	bic.w	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	621a      	str	r2, [r3, #32]
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f023 0210 	bic.w	r2, r3, #16
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	031b      	lsls	r3, r3, #12
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f043 0307 	orr.w	r3, r3, #7
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	021a      	lsls	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	431a      	orrs	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	609a      	str	r2, [r3, #8]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2201      	movs	r2, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	43db      	mvns	r3, r3
 800274e:	401a      	ands	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002788:	2302      	movs	r3, #2
 800278a:	e041      	b.n	8002810 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a14      	ldr	r2, [pc, #80]	@ (800281c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d8:	d004      	beq.n	80027e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a10      	ldr	r2, [pc, #64]	@ (8002820 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d10c      	bne.n	80027fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40000400 	.word	0x40000400

08002824 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <memset>:
 8002848:	4603      	mov	r3, r0
 800284a:	4402      	add	r2, r0
 800284c:	4293      	cmp	r3, r2
 800284e:	d100      	bne.n	8002852 <memset+0xa>
 8002850:	4770      	bx	lr
 8002852:	f803 1b01 	strb.w	r1, [r3], #1
 8002856:	e7f9      	b.n	800284c <memset+0x4>

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2600      	movs	r6, #0
 800285c:	4d0c      	ldr	r5, [pc, #48]	@ (8002890 <__libc_init_array+0x38>)
 800285e:	4c0d      	ldr	r4, [pc, #52]	@ (8002894 <__libc_init_array+0x3c>)
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a6      	cmp	r6, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	f000 f81a 	bl	80028a0 <_init>
 800286c:	2600      	movs	r6, #0
 800286e:	4d0a      	ldr	r5, [pc, #40]	@ (8002898 <__libc_init_array+0x40>)
 8002870:	4c0a      	ldr	r4, [pc, #40]	@ (800289c <__libc_init_array+0x44>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a6      	cmp	r6, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002880:	4798      	blx	r3
 8002882:	3601      	adds	r6, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	f855 3b04 	ldr.w	r3, [r5], #4
 800288a:	4798      	blx	r3
 800288c:	3601      	adds	r6, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	080028dc 	.word	0x080028dc
 8002894:	080028dc 	.word	0x080028dc
 8002898:	080028dc 	.word	0x080028dc
 800289c:	080028e0 	.word	0x080028e0

080028a0 <_init>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	bf00      	nop
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr

080028ac <_fini>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr
