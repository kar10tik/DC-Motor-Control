
n20_encoder_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002160  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800226c  0800226c  0000326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002290  08002290  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002290  08002290  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002290  08002290  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002290  08002290  00003290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002294  08002294  00003294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002298  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080022a4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080022a4  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000858e  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000174a  00000000  00000000  0000c5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0000dd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000750  00000000  00000000  0000e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016445  00000000  00000000  0000ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a167  00000000  00000000  00025225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082067  00000000  00000000  0002f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b13f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d0  00000000  00000000  000b1438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b3b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002254 	.word	0x08002254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002254 	.word	0x08002254

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb82 	bl	8000858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f808 	bl	8000168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8fc 	bl	8000354 <MX_GPIO_Init>
  MX_TIM3_Init();
 800015c:	f000 f898 	bl	8000290 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000160:	f000 f83e 	bl	80001e0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000164:	bf00      	nop
 8000166:	e7fd      	b.n	8000164 <main+0x18>

08000168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b090      	sub	sp, #64	@ 0x40
 800016c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016e:	f107 0318 	add.w	r3, r7, #24
 8000172:	2228      	movs	r2, #40	@ 0x28
 8000174:	2100      	movs	r1, #0
 8000176:	4618      	mov	r0, r3
 8000178:	f002 f840 	bl	80021fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	605a      	str	r2, [r3, #4]
 8000184:	609a      	str	r2, [r3, #8]
 8000186:	60da      	str	r2, [r3, #12]
 8000188:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800018a:	2302      	movs	r3, #2
 800018c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800018e:	2301      	movs	r3, #1
 8000190:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000192:	2310      	movs	r3, #16
 8000194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000196:	2300      	movs	r3, #0
 8000198:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	4618      	mov	r0, r3
 80001a0:	f000 fe5e 	bl	8000e60 <HAL_RCC_OscConfig>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d001      	beq.n	80001ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001aa:	f000 f9bf 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ae:	230f      	movs	r3, #15
 80001b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001b2:	2300      	movs	r3, #0
 80001b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b6:	2300      	movs	r3, #0
 80001b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ba:	2300      	movs	r3, #0
 80001bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001be:	2300      	movs	r3, #0
 80001c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 f8cc 	bl	8001364 <HAL_RCC_ClockConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001d2:	f000 f9ab 	bl	800052c <Error_Handler>
  }
}
 80001d6:	bf00      	nop
 80001d8:	3740      	adds	r7, #64	@ 0x40
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
	...

080001e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b08a      	sub	sp, #40	@ 0x28
 80001e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80001e6:	f107 0320 	add.w	r3, r7, #32
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]
 80001fe:	615a      	str	r2, [r3, #20]
 8000200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000202:	4b22      	ldr	r3, [pc, #136]	@ (800028c <MX_TIM2_Init+0xac>)
 8000204:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000208:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 800020a:	4b20      	ldr	r3, [pc, #128]	@ (800028c <MX_TIM2_Init+0xac>)
 800020c:	2247      	movs	r2, #71	@ 0x47
 800020e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000210:	4b1e      	ldr	r3, [pc, #120]	@ (800028c <MX_TIM2_Init+0xac>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000216:	4b1d      	ldr	r3, [pc, #116]	@ (800028c <MX_TIM2_Init+0xac>)
 8000218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800021c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800021e:	4b1b      	ldr	r3, [pc, #108]	@ (800028c <MX_TIM2_Init+0xac>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000224:	4b19      	ldr	r3, [pc, #100]	@ (800028c <MX_TIM2_Init+0xac>)
 8000226:	2200      	movs	r2, #0
 8000228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800022a:	4818      	ldr	r0, [pc, #96]	@ (800028c <MX_TIM2_Init+0xac>)
 800022c:	f001 f9f6 	bl	800161c <HAL_TIM_PWM_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000236:	f000 f979 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800023a:	2300      	movs	r3, #0
 800023c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800023e:	2300      	movs	r3, #0
 8000240:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000242:	f107 0320 	add.w	r3, r7, #32
 8000246:	4619      	mov	r1, r3
 8000248:	4810      	ldr	r0, [pc, #64]	@ (800028c <MX_TIM2_Init+0xac>)
 800024a:	f001 ff6d 	bl	8002128 <HAL_TIMEx_MasterConfigSynchronization>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000254:	f000 f96a 	bl	800052c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000258:	2360      	movs	r3, #96	@ 0x60
 800025a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000264:	2300      	movs	r3, #0
 8000266:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	4619      	mov	r1, r3
 800026e:	4807      	ldr	r0, [pc, #28]	@ (800028c <MX_TIM2_Init+0xac>)
 8000270:	f001 fc64 	bl	8001b3c <HAL_TIM_PWM_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800027a:	f000 f957 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800027e:	4803      	ldr	r0, [pc, #12]	@ (800028c <MX_TIM2_Init+0xac>)
 8000280:	f000 fa4e 	bl	8000720 <HAL_TIM_MspPostInit>

}
 8000284:	bf00      	nop
 8000286:	3728      	adds	r7, #40	@ 0x28
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000034 	.word	0x20000034

08000290 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08c      	sub	sp, #48	@ 0x30
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000296:	f107 030c 	add.w	r3, r7, #12
 800029a:	2224      	movs	r2, #36	@ 0x24
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 ffac 	bl	80021fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002ac:	4b27      	ldr	r3, [pc, #156]	@ (800034c <MX_TIM3_Init+0xbc>)
 80002ae:	4a28      	ldr	r2, [pc, #160]	@ (8000350 <MX_TIM3_Init+0xc0>)
 80002b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000 - 1;
 80002b2:	4b26      	ldr	r3, [pc, #152]	@ (800034c <MX_TIM3_Init+0xbc>)
 80002b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <MX_TIM3_Init+0xbc>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000 - 1;
 80002c0:	4b22      	ldr	r3, [pc, #136]	@ (800034c <MX_TIM3_Init+0xbc>)
 80002c2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80002c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <MX_TIM3_Init+0xbc>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ce:	4b1f      	ldr	r3, [pc, #124]	@ (800034c <MX_TIM3_Init+0xbc>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80002d4:	2303      	movs	r3, #3
 80002d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002e8:	2300      	movs	r3, #0
 80002ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002ec:	2301      	movs	r3, #1
 80002ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80002f8:	f107 030c 	add.w	r3, r7, #12
 80002fc:	4619      	mov	r1, r3
 80002fe:	4813      	ldr	r0, [pc, #76]	@ (800034c <MX_TIM3_Init+0xbc>)
 8000300:	f001 f9db 	bl	80016ba <HAL_TIM_Encoder_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800030a:	f000 f90f 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4619      	mov	r1, r3
 800031a:	480c      	ldr	r0, [pc, #48]	@ (800034c <MX_TIM3_Init+0xbc>)
 800031c:	f001 ff04 	bl	8002128 <HAL_TIMEx_MasterConfigSynchronization>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000326:	f000 f901 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);//HAL_TIM_Base_Start_IT(&htim3);
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <MX_TIM3_Init+0xbc>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	68da      	ldr	r2, [r3, #12]
 8000330:	4b06      	ldr	r3, [pc, #24]	@ (800034c <MX_TIM3_Init+0xbc>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f042 0201 	orr.w	r2, r2, #1
 8000338:	60da      	str	r2, [r3, #12]
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800033a:	213c      	movs	r1, #60	@ 0x3c
 800033c:	4803      	ldr	r0, [pc, #12]	@ (800034c <MX_TIM3_Init+0xbc>)
 800033e:	f001 fa5e 	bl	80017fe <HAL_TIM_Encoder_Start_IT>
  //
  /* USER CODE END TIM3_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	3730      	adds	r7, #48	@ 0x30
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000007c 	.word	0x2000007c
 8000350:	40000400 	.word	0x40000400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b17      	ldr	r3, [pc, #92]	@ (80003c8 <MX_GPIO_Init+0x74>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a16      	ldr	r2, [pc, #88]	@ (80003c8 <MX_GPIO_Init+0x74>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_GPIO_Init+0x74>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0304 	and.w	r3, r3, #4
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_GPIO_Init+0x74>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a10      	ldr	r2, [pc, #64]	@ (80003c8 <MX_GPIO_Init+0x74>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_GPIO_Init+0x74>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_1_Pin|DIR_2_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	21c0      	movs	r1, #192	@ 0xc0
 800039c:	480b      	ldr	r0, [pc, #44]	@ (80003cc <MX_GPIO_Init+0x78>)
 800039e:	f000 fd47 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_1_Pin DIR_2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_2_Pin;
 80003a2:	23c0      	movs	r3, #192	@ 0xc0
 80003a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	@ (80003cc <MX_GPIO_Init+0x78>)
 80003ba:	f000 fbbd 	bl	8000b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003be:	bf00      	nop
 80003c0:	3718      	adds	r7, #24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	// Read Encoders
	if (htim->Instance == TIM3){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a48      	ldr	r2, [pc, #288]	@ (8000500 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d111      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x36>
		update_encoder(&n20_encoder, htim);
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	4847      	ldr	r0, [pc, #284]	@ (8000504 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003e6:	f000 f8a7 	bl	8000538 <update_encoder>
		current_speed    = n20_encoder.velocity;
 80003ea:	4b46      	ldr	r3, [pc, #280]	@ (8000504 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	4a46      	ldr	r2, [pc, #280]	@ (8000508 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80003f0:	6013      	str	r3, [r2, #0]
		current_position = n20_encoder.position;
 80003f2:	4b44      	ldr	r3, [pc, #272]	@ (8000504 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a45      	ldr	r2, [pc, #276]	@ (800050c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80003f8:	6013      	str	r3, [r2, #0]
		current_count    = n20_encoder.prev_count;
 80003fa:	4b42      	ldr	r3, [pc, #264]	@ (8000504 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	b21a      	sxth	r2, r3
 8000400:	4b43      	ldr	r3, [pc, #268]	@ (8000510 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000402:	801a      	strh	r2, [r3, #0]
        }
        pwm_output = (int16_t)output;
        htim->Instance->CCR1 = pwm_output;
        //__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, pwm_output);
    }
}
 8000404:	e078      	b.n	80004f8 <HAL_TIM_PeriodElapsedCallback+0x128>
	else if (htim->Instance == TIM2) { // Timer update interrupt
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800040e:	d173      	bne.n	80004f8 <HAL_TIM_PeriodElapsedCallback+0x128>
        int32_t count = current_count;
 8000410:	4b3f      	ldr	r3, [pc, #252]	@ (8000510 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000416:	61bb      	str	r3, [r7, #24]
        current_speed = count - last_encoder_count;
 8000418:	4b3e      	ldr	r3, [pc, #248]	@ (8000514 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	69ba      	ldr	r2, [r7, #24]
 800041e:	1ad3      	subs	r3, r2, r3
 8000420:	4a39      	ldr	r2, [pc, #228]	@ (8000508 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000422:	6013      	str	r3, [r2, #0]
        last_encoder_count = count;
 8000424:	4a3b      	ldr	r2, [pc, #236]	@ (8000514 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	6013      	str	r3, [r2, #0]
        int16_t error = target_speed - current_speed;
 800042a:	4b3b      	ldr	r3, [pc, #236]	@ (8000518 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	b29a      	uxth	r2, r3
 8000430:	4b35      	ldr	r3, [pc, #212]	@ (8000508 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	b29b      	uxth	r3, r3
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	b29b      	uxth	r3, r3
 800043a:	82fb      	strh	r3, [r7, #22]
        int32_t p_term = KP * error;
 800043c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000440:	4613      	mov	r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	4413      	add	r3, r2
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	613b      	str	r3, [r7, #16]
        error_integral += error;
 800044a:	4b34      	ldr	r3, [pc, #208]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800044c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000450:	b29a      	uxth	r2, r3
 8000452:	8afb      	ldrh	r3, [r7, #22]
 8000454:	4413      	add	r3, r2
 8000456:	b29b      	uxth	r3, r3
 8000458:	b21a      	sxth	r2, r3
 800045a:	4b30      	ldr	r3, [pc, #192]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800045c:	801a      	strh	r2, [r3, #0]
        if (error_integral > INTEGRAL_MAX) {
 800045e:	4b2f      	ldr	r3, [pc, #188]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000468:	dd04      	ble.n	8000474 <HAL_TIM_PeriodElapsedCallback+0xa4>
        	error_integral = INTEGRAL_MAX;
 800046a:	4b2c      	ldr	r3, [pc, #176]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800046c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000470:	801a      	strh	r2, [r3, #0]
 8000472:	e009      	b.n	8000488 <HAL_TIM_PeriodElapsedCallback+0xb8>
        else if (error_integral < -INTEGRAL_MAX) {
 8000474:	4b29      	ldr	r3, [pc, #164]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800047a:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 800047e:	da03      	bge.n	8000488 <HAL_TIM_PeriodElapsedCallback+0xb8>
        	error_integral = -INTEGRAL_MAX;
 8000480:	4b26      	ldr	r3, [pc, #152]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000482:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8000486:	801a      	strh	r2, [r3, #0]
        int32_t i_term = KI * error_integral;
 8000488:	4b24      	ldr	r3, [pc, #144]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800048a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800048e:	461a      	mov	r2, r3
 8000490:	4613      	mov	r3, r2
 8000492:	011b      	lsls	r3, r3, #4
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	60fb      	str	r3, [r7, #12]
        int32_t d_term = KD * (error - prev_error);
 800049a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800049e:	4b20      	ldr	r3, [pc, #128]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	1ad2      	subs	r2, r2, r3
 80004a4:	4613      	mov	r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	4413      	add	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	60bb      	str	r3, [r7, #8]
        prev_error = error;
 80004ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80004b4:	6013      	str	r3, [r2, #0]
        int32_t output = (p_term + i_term + d_term) / PID_SCALE;
 80004b6:	693a      	ldr	r2, [r7, #16]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	441a      	add	r2, r3
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	4413      	add	r3, r2
 80004c0:	4a18      	ldr	r2, [pc, #96]	@ (8000524 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80004c2:	fb82 1203 	smull	r1, r2, r2, r3
 80004c6:	1152      	asrs	r2, r2, #5
 80004c8:	17db      	asrs	r3, r3, #31
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	61fb      	str	r3, [r7, #28]
        if (output > MAX_PWM) {
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	2bff      	cmp	r3, #255	@ 0xff
 80004d2:	dd02      	ble.n	80004da <HAL_TIM_PeriodElapsedCallback+0x10a>
        	output = MAX_PWM;
 80004d4:	23ff      	movs	r3, #255	@ 0xff
 80004d6:	61fb      	str	r3, [r7, #28]
 80004d8:	e004      	b.n	80004e4 <HAL_TIM_PeriodElapsedCallback+0x114>
        else if (output < MIN_PWM) {
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da01      	bge.n	80004e4 <HAL_TIM_PeriodElapsedCallback+0x114>
        	output = MIN_PWM;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
        pwm_output = (int16_t)output;
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	b21a      	sxth	r2, r3
 80004e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80004ea:	801a      	strh	r2, [r3, #0]
        htim->Instance->CCR1 = pwm_output;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80004ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40000400 	.word	0x40000400
 8000504:	20000028 	.word	0x20000028
 8000508:	200000cc 	.word	0x200000cc
 800050c:	200000d0 	.word	0x200000d0
 8000510:	200000c6 	.word	0x200000c6
 8000514:	200000d8 	.word	0x200000d8
 8000518:	200000d4 	.word	0x200000d4
 800051c:	200000c4 	.word	0x200000c4
 8000520:	200000dc 	.word	0x200000dc
 8000524:	51eb851f 	.word	0x51eb851f
 8000528:	200000c8 	.word	0x200000c8

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <Error_Handler+0x8>

08000538 <update_encoder>:
#include "motor_encoder.h"


void update_encoder(Encoder_data *encoder_value, TIM_HandleTypeDef *htim){
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim); //htim->Instance->CNT
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000548:	60fb      	str	r3, [r7, #12]
	if (temp_counter > encoder_value->prev_count){
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	429a      	cmp	r2, r3
 8000552:	d91b      	bls.n	800058c <update_encoder+0x54>
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f003 0310 	and.w	r3, r3, #16
 800055e:	2b10      	cmp	r3, #16
 8000560:	d10c      	bne.n	800057c <update_encoder+0x44>
			//Handle counter overflow condition
			encoder_value->velocity = -(encoder_value->prev_count) - htim->Instance->ARR - temp_counter;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	425a      	negs	r2, r3
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800056e:	1ad2      	subs	r2, r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	461a      	mov	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	e026      	b.n	80005ca <update_encoder+0x92>
		}
		else{
			encoder_value->velocity = temp_counter - encoder_value->prev_count;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	e01e      	b.n	80005ca <update_encoder+0x92>
		}
	}
	else if (temp_counter < encoder_value->prev_count){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	429a      	cmp	r2, r3
 8000594:	d219      	bcs.n	80005ca <update_encoder+0x92>
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f003 0310 	and.w	r3, r3, #16
 80005a0:	2b10      	cmp	r3, #16
 80005a2:	d107      	bne.n	80005b4 <update_encoder+0x7c>
			encoder_value->velocity = temp_counter - encoder_value->prev_count;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	e00a      	b.n	80005ca <update_encoder+0x92>
		}
		else{
			encoder_value->velocity = temp_counter + htim->Instance->ARR - (encoder_value->prev_count);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	441a      	add	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	605a      	str	r2, [r3, #4]
		}
	}
	encoder_value-> position += encoder_value->velocity;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	441a      	add	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	601a      	str	r2, [r3, #0]
	encoder_value->prev_count = temp_counter;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	609a      	str	r2, [r3, #8]
	return;
 80005de:	bf00      	nop
}
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <HAL_MspInit+0x5c>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <HAL_MspInit+0x5c>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <HAL_MspInit+0x60>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_MspInit+0x60>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800065c:	d113      	bne.n	8000686 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <HAL_TIM_PWM_MspInit+0x44>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <HAL_TIM_PWM_MspInit+0x44>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <HAL_TIM_PWM_MspInit+0x44>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	201c      	movs	r0, #28
 800067c:	f000 fa25 	bl	8000aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000680:	201c      	movs	r0, #28
 8000682:	f000 fa3e 	bl	8000b02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a19      	ldr	r2, [pc, #100]	@ (8000714 <HAL_TIM_Encoder_MspInit+0x80>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d12b      	bne.n	800070c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <HAL_TIM_Encoder_MspInit+0x84>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <HAL_TIM_Encoder_MspInit+0x84>)
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	61d3      	str	r3, [r2, #28]
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <HAL_TIM_Encoder_MspInit+0x84>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <HAL_TIM_Encoder_MspInit+0x84>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a11      	ldr	r2, [pc, #68]	@ (8000718 <HAL_TIM_Encoder_MspInit+0x84>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <HAL_TIM_Encoder_MspInit+0x84>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80006e4:	23c0      	movs	r3, #192	@ 0xc0
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4809      	ldr	r0, [pc, #36]	@ (800071c <HAL_TIM_Encoder_MspInit+0x88>)
 80006f8:	f000 fa1e 	bl	8000b38 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	201d      	movs	r0, #29
 8000702:	f000 f9e2 	bl	8000aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000706:	201d      	movs	r0, #29
 8000708:	f000 f9fb 	bl	8000b02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40000400 	.word	0x40000400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800073e:	d117      	bne.n	8000770 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <HAL_TIM_MspPostInit+0x58>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <HAL_TIM_MspPostInit+0x58>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <HAL_TIM_MspPostInit+0x58>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_PID_Pin;
 8000758:	2301      	movs	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PID_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <HAL_TIM_MspPostInit+0x5c>)
 800076c:	f000 f9e4 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <NMI_Handler+0x4>

08000788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <MemManage_Handler+0x4>

08000798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f888 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007dc:	4802      	ldr	r0, [pc, #8]	@ (80007e8 <TIM2_IRQHandler+0x10>)
 80007de:	f001 f8bc 	bl	800195a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000034 	.word	0x20000034

080007ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007f0:	4802      	ldr	r0, [pc, #8]	@ (80007fc <TIM3_IRQHandler+0x10>)
 80007f2:	f001 f8b2 	bl	800195a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000007c 	.word	0x2000007c

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800080c:	f7ff fff8 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000812:	490c      	ldr	r1, [pc, #48]	@ (8000844 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000814:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a09      	ldr	r2, [pc, #36]	@ (800084c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000828:	4c09      	ldr	r4, [pc, #36]	@ (8000850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f001 fce9 	bl	800220c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fc87 	bl	800014c <main>
  bx lr
 800083e:	4770      	bx	lr
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000848:	08002298 	.word	0x08002298
  ldr r2, =_sbss
 800084c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000850:	200000e4 	.word	0x200000e4

08000854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_2_IRQHandler>
	...

08000858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_Init+0x28>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	@ (8000880 <HAL_Init+0x28>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f923 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff feb8 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f93b 	bl	8000b1e <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f903 	bl	8000aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a03      	ldr	r2, [pc, #12]	@ (8000904 <HAL_IncTick+0x20>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	20000008 	.word	0x20000008
 8000904:	200000e0 	.word	0x200000e0

08000908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	@ (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	200000e0 	.word	0x200000e0

0800091c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094e:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	60d3      	str	r3, [r2, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000968:	4b04      	ldr	r3, [pc, #16]	@ (800097c <__NVIC_GetPriorityGrouping+0x18>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	f003 0307 	and.w	r3, r3, #7
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db0b      	blt.n	80009aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 021f 	and.w	r2, r3, #31
 8000998:	4906      	ldr	r1, [pc, #24]	@ (80009b4 <__NVIC_EnableIRQ+0x34>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	095b      	lsrs	r3, r3, #5
 80009a0:	2001      	movs	r0, #1
 80009a2:	fa00 f202 	lsl.w	r2, r0, r2
 80009a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	@ (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	@ (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	@ 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
         );
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	@ 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a80:	d301      	bcc.n	8000a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00f      	b.n	8000aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <SysTick_Config+0x40>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8e:	210f      	movs	r1, #15
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f7ff ff90 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <SysTick_Config+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9e:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <SysTick_Config+0x40>)
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff2d 	bl	800091c <__NVIC_SetPriorityGrouping>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000adc:	f7ff ff42 	bl	8000964 <__NVIC_GetPriorityGrouping>
 8000ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff ff90 	bl	8000a0c <NVIC_EncodePriority>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff5f 	bl	80009b8 <__NVIC_SetPriority>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff35 	bl	8000980 <__NVIC_EnableIRQ>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffa2 	bl	8000a70 <SysTick_Config>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b08b      	sub	sp, #44	@ 0x2c
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	e161      	b.n	8000e10 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 8150 	bne.w	8000e0a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	4a97      	ldr	r2, [pc, #604]	@ (8000dcc <HAL_GPIO_Init+0x294>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d05e      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b74:	4a95      	ldr	r2, [pc, #596]	@ (8000dcc <HAL_GPIO_Init+0x294>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d875      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a95      	ldr	r2, [pc, #596]	@ (8000dd0 <HAL_GPIO_Init+0x298>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d058      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b80:	4a93      	ldr	r2, [pc, #588]	@ (8000dd0 <HAL_GPIO_Init+0x298>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d86f      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b86:	4a93      	ldr	r2, [pc, #588]	@ (8000dd4 <HAL_GPIO_Init+0x29c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d052      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b8c:	4a91      	ldr	r2, [pc, #580]	@ (8000dd4 <HAL_GPIO_Init+0x29c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d869      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b92:	4a91      	ldr	r2, [pc, #580]	@ (8000dd8 <HAL_GPIO_Init+0x2a0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d04c      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b98:	4a8f      	ldr	r2, [pc, #572]	@ (8000dd8 <HAL_GPIO_Init+0x2a0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d863      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b9e:	4a8f      	ldr	r2, [pc, #572]	@ (8000ddc <HAL_GPIO_Init+0x2a4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d046      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a8d      	ldr	r2, [pc, #564]	@ (8000ddc <HAL_GPIO_Init+0x2a4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d85d      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d82a      	bhi.n	8000c04 <HAL_GPIO_Init+0xcc>
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d859      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb8 <HAL_GPIO_Init+0x80>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000c33 	.word	0x08000c33
 8000bbc:	08000c0d 	.word	0x08000c0d
 8000bc0:	08000c1f 	.word	0x08000c1f
 8000bc4:	08000c61 	.word	0x08000c61
 8000bc8:	08000c67 	.word	0x08000c67
 8000bcc:	08000c67 	.word	0x08000c67
 8000bd0:	08000c67 	.word	0x08000c67
 8000bd4:	08000c67 	.word	0x08000c67
 8000bd8:	08000c67 	.word	0x08000c67
 8000bdc:	08000c67 	.word	0x08000c67
 8000be0:	08000c67 	.word	0x08000c67
 8000be4:	08000c67 	.word	0x08000c67
 8000be8:	08000c67 	.word	0x08000c67
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c67 	.word	0x08000c67
 8000bf4:	08000c67 	.word	0x08000c67
 8000bf8:	08000c67 	.word	0x08000c67
 8000bfc:	08000c15 	.word	0x08000c15
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	4a76      	ldr	r2, [pc, #472]	@ (8000de0 <HAL_GPIO_Init+0x2a8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d013      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0a:	e02c      	b.n	8000c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e029      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e024      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	3308      	adds	r3, #8
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e01f      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	330c      	adds	r3, #12
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e01a      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e013      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d105      	bne.n	8000c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	611a      	str	r2, [r3, #16]
          break;
 8000c52:	e009      	b.n	8000c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c54:	2308      	movs	r3, #8
 8000c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	615a      	str	r2, [r3, #20]
          break;
 8000c5e:	e003      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          break;
 8000c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2bff      	cmp	r3, #255	@ 0xff
 8000c6c:	d801      	bhi.n	8000c72 <HAL_GPIO_Init+0x13a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	e001      	b.n	8000c76 <HAL_GPIO_Init+0x13e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3304      	adds	r3, #4
 8000c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2bff      	cmp	r3, #255	@ 0xff
 8000c7c:	d802      	bhi.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x152>
 8000c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c86:	3b08      	subs	r3, #8
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	210f      	movs	r1, #15
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	6a39      	ldr	r1, [r7, #32]
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80a9 	beq.w	8000e0a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a49      	ldr	r2, [pc, #292]	@ (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b47      	ldr	r3, [pc, #284]	@ (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd0:	4a45      	ldr	r2, [pc, #276]	@ (8000de8 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a3d      	ldr	r2, [pc, #244]	@ (8000dec <HAL_GPIO_Init+0x2b4>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d00d      	beq.n	8000d18 <HAL_GPIO_Init+0x1e0>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0x1dc>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3b      	ldr	r2, [pc, #236]	@ (8000df4 <HAL_GPIO_Init+0x2bc>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d101      	bne.n	8000d10 <HAL_GPIO_Init+0x1d8>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e004      	b.n	8000d1a <HAL_GPIO_Init+0x1e2>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0x1e2>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <HAL_GPIO_Init+0x1e2>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d1c:	f002 0203 	and.w	r2, r2, #3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4093      	lsls	r3, r2
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2a:	492f      	ldr	r1, [pc, #188]	@ (8000de8 <HAL_GPIO_Init+0x2b0>)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d44:	4b2c      	ldr	r3, [pc, #176]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	492b      	ldr	r1, [pc, #172]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d52:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4927      	ldr	r1, [pc, #156]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	4921      	ldr	r1, [pc, #132]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60cb      	str	r3, [r1, #12]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	491d      	ldr	r1, [pc, #116]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d94:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4917      	ldr	r1, [pc, #92]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	4913      	ldr	r1, [pc, #76]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01f      	beq.n	8000dfc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	490d      	ldr	r1, [pc, #52]	@ (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	600b      	str	r3, [r1, #0]
 8000dc8:	e01f      	b.n	8000e0a <HAL_GPIO_Init+0x2d2>
 8000dca:	bf00      	nop
 8000dcc:	10320000 	.word	0x10320000
 8000dd0:	10310000 	.word	0x10310000
 8000dd4:	10220000 	.word	0x10220000
 8000dd8:	10210000 	.word	0x10210000
 8000ddc:	10120000 	.word	0x10120000
 8000de0:	10110000 	.word	0x10110000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	40011000 	.word	0x40011000
 8000df8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <HAL_GPIO_Init+0x2f4>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4909      	ldr	r1, [pc, #36]	@ (8000e2c <HAL_GPIO_Init+0x2f4>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e16:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f47f ae96 	bne.w	8000b4c <HAL_GPIO_Init+0x14>
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	372c      	adds	r7, #44	@ 0x2c
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e40:	787b      	ldrb	r3, [r7, #1]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e4c:	e003      	b.n	8000e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	041a      	lsls	r2, r3, #16
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	611a      	str	r2, [r3, #16]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e272      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8087 	beq.w	8000f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e80:	4b92      	ldr	r3, [pc, #584]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d00c      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 030c 	and.w	r3, r3, #12
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d112      	bne.n	8000ebe <HAL_RCC_OscConfig+0x5e>
 8000e98:	4b8c      	ldr	r3, [pc, #560]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ea4:	d10b      	bne.n	8000ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea6:	4b89      	ldr	r3, [pc, #548]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d06c      	beq.n	8000f8c <HAL_RCC_OscConfig+0x12c>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d168      	bne.n	8000f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e24c      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x76>
 8000ec8:	4b80      	ldr	r3, [pc, #512]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e02e      	b.n	8000f34 <HAL_RCC_OscConfig+0xd4>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x98>
 8000ede:	4b7b      	ldr	r3, [pc, #492]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b78      	ldr	r3, [pc, #480]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a77      	ldr	r2, [pc, #476]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e01d      	b.n	8000f34 <HAL_RCC_OscConfig+0xd4>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0xbc>
 8000f02:	4b72      	ldr	r3, [pc, #456]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a71      	ldr	r2, [pc, #452]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a6e      	ldr	r2, [pc, #440]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e00b      	b.n	8000f34 <HAL_RCC_OscConfig+0xd4>
 8000f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a6a      	ldr	r2, [pc, #424]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b68      	ldr	r3, [pc, #416]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a67      	ldr	r2, [pc, #412]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d013      	beq.n	8000f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fce4 	bl	8000908 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f44:	f7ff fce0 	bl	8000908 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b64      	cmp	r3, #100	@ 0x64
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e200      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f56:	4b5d      	ldr	r3, [pc, #372]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f0      	beq.n	8000f44 <HAL_RCC_OscConfig+0xe4>
 8000f62:	e014      	b.n	8000f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fcd0 	bl	8000908 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fccc 	bl	8000908 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	@ 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e1ec      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	4b53      	ldr	r3, [pc, #332]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f0      	bne.n	8000f6c <HAL_RCC_OscConfig+0x10c>
 8000f8a:	e000      	b.n	8000f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d063      	beq.n	8001062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00b      	beq.n	8000fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fa6:	4b49      	ldr	r3, [pc, #292]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d11c      	bne.n	8000fec <HAL_RCC_OscConfig+0x18c>
 8000fb2:	4b46      	ldr	r3, [pc, #280]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d116      	bne.n	8000fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbe:	4b43      	ldr	r3, [pc, #268]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x176>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e1c0      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4939      	ldr	r1, [pc, #228]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	e03a      	b.n	8001062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d020      	beq.n	8001036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff4:	4b36      	ldr	r3, [pc, #216]	@ (80010d0 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fc85 	bl	8000908 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001002:	f7ff fc81 	bl	8000908 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e1a1      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001014:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f0      	beq.n	8001002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4927      	ldr	r1, [pc, #156]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001030:	4313      	orrs	r3, r2
 8001032:	600b      	str	r3, [r1, #0]
 8001034:	e015      	b.n	8001062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001036:	4b26      	ldr	r3, [pc, #152]	@ (80010d0 <HAL_RCC_OscConfig+0x270>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fc64 	bl	8000908 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001044:	f7ff fc60 	bl	8000908 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e180      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d03a      	beq.n	80010e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d019      	beq.n	80010aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <HAL_RCC_OscConfig+0x274>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107c:	f7ff fc44 	bl	8000908 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fc40 	bl	8000908 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e160      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001096:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <HAL_RCC_OscConfig+0x26c>)
 8001098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f000 fa9c 	bl	80015e0 <RCC_Delay>
 80010a8:	e01c      	b.n	80010e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_RCC_OscConfig+0x274>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b0:	f7ff fc2a 	bl	8000908 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b6:	e00f      	b.n	80010d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc26 	bl	8000908 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d908      	bls.n	80010d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e146      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	42420000 	.word	0x42420000
 80010d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d8:	4b92      	ldr	r3, [pc, #584]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e9      	bne.n	80010b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80a6 	beq.w	800123e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10d      	bne.n	800111e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b88      	ldr	r3, [pc, #544]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a87      	ldr	r2, [pc, #540]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b85      	ldr	r3, [pc, #532]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800111a:	2301      	movs	r3, #1
 800111c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111e:	4b82      	ldr	r3, [pc, #520]	@ (8001328 <HAL_RCC_OscConfig+0x4c8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d118      	bne.n	800115c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112a:	4b7f      	ldr	r3, [pc, #508]	@ (8001328 <HAL_RCC_OscConfig+0x4c8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a7e      	ldr	r2, [pc, #504]	@ (8001328 <HAL_RCC_OscConfig+0x4c8>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001136:	f7ff fbe7 	bl	8000908 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113e:	f7ff fbe3 	bl	8000908 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b64      	cmp	r3, #100	@ 0x64
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e103      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001150:	4b75      	ldr	r3, [pc, #468]	@ (8001328 <HAL_RCC_OscConfig+0x4c8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d106      	bne.n	8001172 <HAL_RCC_OscConfig+0x312>
 8001164:	4b6f      	ldr	r3, [pc, #444]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a6e      	ldr	r2, [pc, #440]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6213      	str	r3, [r2, #32]
 8001170:	e02d      	b.n	80011ce <HAL_RCC_OscConfig+0x36e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x334>
 800117a:	4b6a      	ldr	r3, [pc, #424]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a69      	ldr	r2, [pc, #420]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	4b67      	ldr	r3, [pc, #412]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4a66      	ldr	r2, [pc, #408]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	f023 0304 	bic.w	r3, r3, #4
 8001190:	6213      	str	r3, [r2, #32]
 8001192:	e01c      	b.n	80011ce <HAL_RCC_OscConfig+0x36e>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b05      	cmp	r3, #5
 800119a:	d10c      	bne.n	80011b6 <HAL_RCC_OscConfig+0x356>
 800119c:	4b61      	ldr	r3, [pc, #388]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a60      	ldr	r2, [pc, #384]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6213      	str	r3, [r2, #32]
 80011b4:	e00b      	b.n	80011ce <HAL_RCC_OscConfig+0x36e>
 80011b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	6213      	str	r3, [r2, #32]
 80011c2:	4b58      	ldr	r3, [pc, #352]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4a57      	ldr	r2, [pc, #348]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	f023 0304 	bic.w	r3, r3, #4
 80011cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d015      	beq.n	8001202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fb97 	bl	8000908 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011de:	f7ff fb93 	bl	8000908 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e0b1      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0ee      	beq.n	80011de <HAL_RCC_OscConfig+0x37e>
 8001200:	e014      	b.n	800122c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fb81 	bl	8000908 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fb7d 	bl	8000908 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e09b      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001220:	4b40      	ldr	r3, [pc, #256]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ee      	bne.n	800120a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d105      	bne.n	800123e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001232:	4b3c      	ldr	r3, [pc, #240]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a3b      	ldr	r2, [pc, #236]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8087 	beq.w	8001356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001248:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	d061      	beq.n	8001318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d146      	bne.n	80012ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125c:	4b33      	ldr	r3, [pc, #204]	@ (800132c <HAL_RCC_OscConfig+0x4cc>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff fb51 	bl	8000908 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126a:	f7ff fb4d 	bl	8000908 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e06d      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127c:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001290:	d108      	bne.n	80012a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001292:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	4921      	ldr	r1, [pc, #132]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a19      	ldr	r1, [r3, #32]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	430b      	orrs	r3, r1
 80012b6:	491b      	ldr	r1, [pc, #108]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012bc:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_RCC_OscConfig+0x4cc>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fb21 	bl	8000908 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff fb1d 	bl	8000908 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e03d      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x46a>
 80012e8:	e035      	b.n	8001356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <HAL_RCC_OscConfig+0x4cc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fb0a 	bl	8000908 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fb06 	bl	8000908 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e026      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x498>
 8001316:	e01e      	b.n	8001356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d107      	bne.n	8001330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e019      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
 8001324:	40021000 	.word	0x40021000
 8001328:	40007000 	.word	0x40007000
 800132c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_RCC_OscConfig+0x500>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	429a      	cmp	r2, r3
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	429a      	cmp	r2, r3
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0d0      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001378:	4b6a      	ldr	r3, [pc, #424]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d910      	bls.n	80013a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b67      	ldr	r3, [pc, #412]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 0207 	bic.w	r2, r3, #7
 800138e:	4965      	ldr	r1, [pc, #404]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b63      	ldr	r3, [pc, #396]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0b8      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c0:	4b59      	ldr	r3, [pc, #356]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a58      	ldr	r2, [pc, #352]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d8:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a52      	ldr	r2, [pc, #328]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e4:	4b50      	ldr	r3, [pc, #320]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	494d      	ldr	r1, [pc, #308]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d040      	beq.n	8001484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d115      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e07f      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001422:	4b41      	ldr	r3, [pc, #260]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e073      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e06b      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001442:	4b39      	ldr	r3, [pc, #228]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f023 0203 	bic.w	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4936      	ldr	r1, [pc, #216]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001454:	f7ff fa58 	bl	8000908 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	e00a      	b.n	8001472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145c:	f7ff fa54 	bl	8000908 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e053      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	4b2d      	ldr	r3, [pc, #180]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 020c 	and.w	r2, r3, #12
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	429a      	cmp	r2, r3
 8001482:	d1eb      	bne.n	800145c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d210      	bcs.n	80014b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 0207 	bic.w	r2, r3, #7
 800149a:	4922      	ldr	r1, [pc, #136]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e032      	b.n	800151a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4916      	ldr	r1, [pc, #88]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	490e      	ldr	r1, [pc, #56]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014f2:	f000 f821 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	490a      	ldr	r1, [pc, #40]	@ (800152c <HAL_RCC_ClockConfig+0x1c8>)
 8001504:	5ccb      	ldrb	r3, [r1, r3]
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <HAL_RCC_ClockConfig+0x1cc>)
 800150c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_RCC_ClockConfig+0x1d0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f9b6 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40022000 	.word	0x40022000
 8001528:	40021000 	.word	0x40021000
 800152c:	0800226c 	.word	0x0800226c
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d002      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x30>
 8001562:	2b08      	cmp	r3, #8
 8001564:	d003      	beq.n	800156e <HAL_RCC_GetSysClockFreq+0x36>
 8001566:	e027      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800156a:	613b      	str	r3, [r7, #16]
      break;
 800156c:	e027      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	0c9b      	lsrs	r3, r3, #18
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d010      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	0c5b      	lsrs	r3, r3, #17
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	4a11      	ldr	r2, [pc, #68]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a0d      	ldr	r2, [pc, #52]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800159a:	fb03 f202 	mul.w	r2, r3, r2
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e004      	b.n	80015b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	613b      	str	r3, [r7, #16]
      break;
 80015b6:	e002      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ba:	613b      	str	r3, [r7, #16]
      break;
 80015bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015be:	693b      	ldr	r3, [r7, #16]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	007a1200 	.word	0x007a1200
 80015d4:	0800227c 	.word	0x0800227c
 80015d8:	0800228c 	.word	0x0800228c
 80015dc:	003d0900 	.word	0x003d0900

080015e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <RCC_Delay+0x34>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <RCC_Delay+0x38>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0a5b      	lsrs	r3, r3, #9
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015fc:	bf00      	nop
  }
  while (Delay --);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	60fa      	str	r2, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f9      	bne.n	80015fc <RCC_Delay+0x1c>
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000000 	.word	0x20000000
 8001618:	10624dd3 	.word	0x10624dd3

0800161c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e041      	b.n	80016b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff f802 	bl	800064c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3304      	adds	r3, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f000 fb54 	bl	8001d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e093      	b.n	80017f6 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7fe ffd6 	bl	8000694 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016fe:	f023 0307 	bic.w	r3, r3, #7
 8001702:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3304      	adds	r3, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4610      	mov	r0, r2
 8001710:	f000 fafa 	bl	8001d08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4313      	orrs	r3, r2
 8001734:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800173c:	f023 0303 	bic.w	r3, r3, #3
 8001740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	4313      	orrs	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800175a:	f023 030c 	bic.w	r3, r3, #12
 800175e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001766:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800176a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	4313      	orrs	r3, r2
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	011a      	lsls	r2, r3, #4
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	031b      	lsls	r3, r3, #12
 800178a:	4313      	orrs	r3, r2
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001798:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4313      	orrs	r3, r2
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800180e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001816:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800181e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001826:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d110      	bne.n	8001850 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d102      	bne.n	800183a <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001834:	7b7b      	ldrb	r3, [r7, #13]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e089      	b.n	8001952 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2202      	movs	r2, #2
 8001842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800184e:	e031      	b.n	80018b4 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b04      	cmp	r3, #4
 8001854:	d110      	bne.n	8001878 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001856:	7bbb      	ldrb	r3, [r7, #14]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d102      	bne.n	8001862 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800185c:	7b3b      	ldrb	r3, [r7, #12]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d001      	beq.n	8001866 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e075      	b.n	8001952 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2202      	movs	r2, #2
 8001872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001876:	e01d      	b.n	80018b4 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001884:	7b7b      	ldrb	r3, [r7, #13]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800188a:	7b3b      	ldrb	r3, [r7, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d001      	beq.n	8001894 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e05e      	b.n	8001952 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_TIM_Encoder_Start_IT+0xc4>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d010      	beq.n	80018e2 <HAL_TIM_Encoder_Start_IT+0xe4>
 80018c0:	e01f      	b.n	8001902 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fc08 	bl	80020e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0202 	orr.w	r2, r2, #2
 80018de:	60da      	str	r2, [r3, #12]
      break;
 80018e0:	e02e      	b.n	8001940 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2201      	movs	r2, #1
 80018e8:	2104      	movs	r1, #4
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fbf8 	bl	80020e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0204 	orr.w	r2, r2, #4
 80018fe:	60da      	str	r2, [r3, #12]
      break;
 8001900:	e01e      	b.n	8001940 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fbe8 	bl	80020e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	2104      	movs	r1, #4
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fbe1 	bl	80020e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0202 	orr.w	r2, r2, #2
 800192c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0204 	orr.w	r2, r2, #4
 800193c:	60da      	str	r2, [r3, #12]
      break;
 800193e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01b      	beq.n	80019be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f06f 0202 	mvn.w	r2, #2
 800198e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f994 	bl	8001cd2 <HAL_TIM_IC_CaptureCallback>
 80019aa:	e005      	b.n	80019b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f987 	bl	8001cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f996 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01b      	beq.n	8001a0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f06f 0204 	mvn.w	r2, #4
 80019da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f96e 	bl	8001cd2 <HAL_TIM_IC_CaptureCallback>
 80019f6:	e005      	b.n	8001a04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f961 	bl	8001cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f970 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d01b      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0208 	mvn.w	r2, #8
 8001a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f948 	bl	8001cd2 <HAL_TIM_IC_CaptureCallback>
 8001a42:	e005      	b.n	8001a50 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f93b 	bl	8001cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f94a 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01b      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f06f 0210 	mvn.w	r2, #16
 8001a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2208      	movs	r2, #8
 8001a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f922 	bl	8001cd2 <HAL_TIM_IC_CaptureCallback>
 8001a8e:	e005      	b.n	8001a9c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f915 	bl	8001cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f924 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f06f 0201 	mvn.w	r2, #1
 8001abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7fe fc85 	bl	80003d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00c      	beq.n	8001aea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fb80 	bl	80021ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00c      	beq.n	8001b0e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8f4 	bl	8001cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0220 	mvn.w	r2, #32
 8001b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fb53 	bl	80021d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e0ae      	b.n	8001cb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	f200 809f 	bhi.w	8001ca8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001ba5 	.word	0x08001ba5
 8001b74:	08001ca9 	.word	0x08001ca9
 8001b78:	08001ca9 	.word	0x08001ca9
 8001b7c:	08001ca9 	.word	0x08001ca9
 8001b80:	08001be5 	.word	0x08001be5
 8001b84:	08001ca9 	.word	0x08001ca9
 8001b88:	08001ca9 	.word	0x08001ca9
 8001b8c:	08001ca9 	.word	0x08001ca9
 8001b90:	08001c27 	.word	0x08001c27
 8001b94:	08001ca9 	.word	0x08001ca9
 8001b98:	08001ca9 	.word	0x08001ca9
 8001b9c:	08001ca9 	.word	0x08001ca9
 8001ba0:	08001c67 	.word	0x08001c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f910 	bl	8001dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0208 	orr.w	r2, r2, #8
 8001bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0204 	bic.w	r2, r2, #4
 8001bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6999      	ldr	r1, [r3, #24]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	619a      	str	r2, [r3, #24]
      break;
 8001be2:	e064      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f956 	bl	8001e9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6999      	ldr	r1, [r3, #24]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	021a      	lsls	r2, r3, #8
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	619a      	str	r2, [r3, #24]
      break;
 8001c24:	e043      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f99f 	bl	8001f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69da      	ldr	r2, [r3, #28]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0208 	orr.w	r2, r2, #8
 8001c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69da      	ldr	r2, [r3, #28]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0204 	bic.w	r2, r2, #4
 8001c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69d9      	ldr	r1, [r3, #28]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	61da      	str	r2, [r3, #28]
      break;
 8001c64:	e023      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f9e9 	bl	8002044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69da      	ldr	r2, [r3, #28]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69d9      	ldr	r1, [r3, #28]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	021a      	lsls	r2, r3, #8
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	61da      	str	r2, [r3, #28]
      break;
 8001ca6:	e002      	b.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	75fb      	strb	r3, [r7, #23]
      break;
 8001cac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc8 <TIM_Base_SetConfig+0xc0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d007      	beq.n	8001d30 <TIM_Base_SetConfig+0x28>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d26:	d003      	beq.n	8001d30 <TIM_Base_SetConfig+0x28>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a28      	ldr	r2, [pc, #160]	@ (8001dcc <TIM_Base_SetConfig+0xc4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d108      	bne.n	8001d42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a20      	ldr	r2, [pc, #128]	@ (8001dc8 <TIM_Base_SetConfig+0xc0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <TIM_Base_SetConfig+0x52>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d50:	d003      	beq.n	8001d5a <TIM_Base_SetConfig+0x52>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a1d      	ldr	r2, [pc, #116]	@ (8001dcc <TIM_Base_SetConfig+0xc4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d108      	bne.n	8001d6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <TIM_Base_SetConfig+0xc0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d103      	bne.n	8001da0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f023 0201 	bic.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	611a      	str	r2, [r3, #16]
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f023 0201 	bic.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0303 	bic.w	r3, r3, #3
 8001e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f023 0302 	bic.w	r3, r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <TIM_OC1_SetConfig+0xc8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d10c      	bne.n	8001e46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f023 0308 	bic.w	r3, r3, #8
 8001e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a13      	ldr	r2, [pc, #76]	@ (8001e98 <TIM_OC1_SetConfig+0xc8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d111      	bne.n	8001e72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	621a      	str	r2, [r3, #32]
}
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40012c00 	.word	0x40012c00

08001e9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f023 0210 	bic.w	r2, r3, #16
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f023 0320 	bic.w	r3, r3, #32
 8001ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f6c <TIM_OC2_SetConfig+0xd0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d10d      	bne.n	8001f18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a14      	ldr	r2, [pc, #80]	@ (8001f6c <TIM_OC2_SetConfig+0xd0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d113      	bne.n	8001f48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	621a      	str	r2, [r3, #32]
}
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40012c00 	.word	0x40012c00

08001f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <TIM_OC3_SetConfig+0xd0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10d      	bne.n	8001fea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <TIM_OC3_SetConfig+0xd0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d113      	bne.n	800201a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	621a      	str	r2, [r3, #32]
}
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40012c00 	.word	0x40012c00

08002044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800207a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800208e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	031b      	lsls	r3, r3, #12
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <TIM_OC4_SetConfig+0x98>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d109      	bne.n	80020b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	019b      	lsls	r3, r3, #6
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	621a      	str	r2, [r3, #32]
}
 80020d2:	bf00      	nop
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40012c00 	.word	0x40012c00

080020e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2201      	movs	r2, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800213c:	2302      	movs	r3, #2
 800213e:	e041      	b.n	80021c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800218c:	d004      	beq.n	8002198 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a10      	ldr	r2, [pc, #64]	@ (80021d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d10c      	bne.n	80021b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800219e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	40000400 	.word	0x40000400

080021d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <memset>:
 80021fc:	4603      	mov	r3, r0
 80021fe:	4402      	add	r2, r0
 8002200:	4293      	cmp	r3, r2
 8002202:	d100      	bne.n	8002206 <memset+0xa>
 8002204:	4770      	bx	lr
 8002206:	f803 1b01 	strb.w	r1, [r3], #1
 800220a:	e7f9      	b.n	8002200 <memset+0x4>

0800220c <__libc_init_array>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	2600      	movs	r6, #0
 8002210:	4d0c      	ldr	r5, [pc, #48]	@ (8002244 <__libc_init_array+0x38>)
 8002212:	4c0d      	ldr	r4, [pc, #52]	@ (8002248 <__libc_init_array+0x3c>)
 8002214:	1b64      	subs	r4, r4, r5
 8002216:	10a4      	asrs	r4, r4, #2
 8002218:	42a6      	cmp	r6, r4
 800221a:	d109      	bne.n	8002230 <__libc_init_array+0x24>
 800221c:	f000 f81a 	bl	8002254 <_init>
 8002220:	2600      	movs	r6, #0
 8002222:	4d0a      	ldr	r5, [pc, #40]	@ (800224c <__libc_init_array+0x40>)
 8002224:	4c0a      	ldr	r4, [pc, #40]	@ (8002250 <__libc_init_array+0x44>)
 8002226:	1b64      	subs	r4, r4, r5
 8002228:	10a4      	asrs	r4, r4, #2
 800222a:	42a6      	cmp	r6, r4
 800222c:	d105      	bne.n	800223a <__libc_init_array+0x2e>
 800222e:	bd70      	pop	{r4, r5, r6, pc}
 8002230:	f855 3b04 	ldr.w	r3, [r5], #4
 8002234:	4798      	blx	r3
 8002236:	3601      	adds	r6, #1
 8002238:	e7ee      	b.n	8002218 <__libc_init_array+0xc>
 800223a:	f855 3b04 	ldr.w	r3, [r5], #4
 800223e:	4798      	blx	r3
 8002240:	3601      	adds	r6, #1
 8002242:	e7f2      	b.n	800222a <__libc_init_array+0x1e>
 8002244:	08002290 	.word	0x08002290
 8002248:	08002290 	.word	0x08002290
 800224c:	08002290 	.word	0x08002290
 8002250:	08002294 	.word	0x08002294

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
